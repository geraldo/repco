version: '3.1'

services:
  app:
    image: arsoxyz/repco:main
    container_name: repco-app
    restart: unless-stopped
    expose:
      - 8765
    ports:
      - 8765:8765
    environment:
      - DATABASE_URL=postgresql://repco:repco@db:5432/repco
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres
    container_name: repco-db
    restart: unless-stopped
    volumes:
      - ./data/repco-db:/var/lib/postgresql/data"
    expose:
      - 5432
    command:
      ['postgres', '-c', 'wal_level=logical', '-c', 'max_replication_slots=4']
    environment:
      POSTGRES_PASSWORD: repco
      POSTGRES_USER: repco
      POSTGRES_DB: repco
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U repco']
      interval: 5s
      timeout: 5s
      retries: 5

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELASTIC_VERSION}
    container_name: repco-es
    restart: unless-stopped
    labels:
      co.elastic.logs/module: elasticsearch
    volumes:
      - ./data/elastic/es01:/var/lib/elasticsearch/data
    ports:
      - 9201:${ELASTIC_PORT}
    environment:
      - node.name=es01
      - cluster.name=${ELASTIC_CLUSTER_NAME}
      - discovery.type=single-node
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=false
      - xpack.license.self_generated.type=${ELASTIC_LICENSE}
      - ES_JAVA_OPTS=-Xms750m -Xmx4g
      - http.host=0.0.0.0
      - transport.host=127.0.0.1
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          'CMD-SHELL',
          "curl -s --user elastic:${ELASTIC_PASSWORD} -X GET http://localhost:9200/_cluster/health?pretty | grep status | grep -q '\\(green\\|yellow\\)'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120

  redis:
    image: 'redis:alpine'
    container_name: repco-redis
    restart: unless-stopped
    command: ['redis-server', '--requirepass', '${REDIS_PASSWORD}']
    volumes:
      - ./data/redis:/data
    ports:
      - '6379:6379'

  pgsync:
    build:
      context: ../pgsync
    container_name: repco-pgsync
    volumes:
      - /var/www/repco.cba.media/repco/docker/data/pgsync:/data
    sysctls:
      - net.ipv4.tcp_keepalive_time=200
      - net.ipv4.tcp_keepalive_intvl=200
      - net.ipv4.tcp_keepalive_probes=5
    labels:
      org.label-schema.name: 'pgsync'
      org.label-schema.description: 'Postgres to Elasticsearch sync'
      com.label-schema.service-type: 'daemon'
    depends_on:
      - db
      - es01
      - redis
    environment:
      - PG_USER=repco
      - PG_HOST=db
      - PG_PORT=5432
      - PG_PASSWORD=repco
      - PG_DATABASE=repco
      - LOG_LEVEL=DEBUG
      - CONSOLE_LOGGING_HANDLER_MIN_LEVEL=DEBUG
      - ELASTICSEARCH_PORT=9200
      - ELASTICSEARCH_SCHEME=http
      - ELASTICSEARCH_HOST=es01
      - ELASTICSEARCH_CHUNK_SIZE=2000
      - ELASTICSEARCH_MAX_CHUNK_BYTES=104857600
      - ELASTICSEARCH_MAX_RETRIES=14
      - ELASTICSEARCH_QUEUE_SIZE=4
      - ELASTICSEARCH_STREAMING_BULK=False
      - ELASTICSEARCH_THREAD_COUNT=4
      - ELASTICSEARCH_TIMEOUT=10
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_AUTH=repco
      - REDIS_READ_CHUNK_SIZE=1000
      - ELASTICSEARCH=true
      - OPENSEARCH=false
      - SCHEMA=/data
      - CHECKPOINT_PATH=/data
