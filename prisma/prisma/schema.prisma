datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  theme    = "forrest"
}

model License {
  id   String @unique @default(uuid())
  name String
  // missing relation MediaAsset, ContentItem, Show, PublicationChannl
}

model Contribution {
  id   String @unique @default(uuid())
  role String
  // missing relation Actor, contributedTo

}

model Actor {
  id                 String @unique @default(uuid())
  name String
  // better as Enum?
  // type String
  contactInformation String
  // same as type?
  role               String
  // may Image?
  file File?
}


model ContentItem {
  id                       String                     @id @unique @default(uuid())
  title                    String
  subtitle                 String
  summary                  String
  fullText                 String
  // What is that for?
  groupingDelta            String
  Collection               Collection?                @relation(fields: [collectionId], references: [id])
  collectionId             String?
  Grouping                 Grouping?                  @relation(fields: [groupingId], references: [id])
  groupingId               String?
  ContentItemsOnMediaAsset ContentItemsOnMediaAsset[]
  // extra Table?!
  relatedTo                ContentItem[]              @relation("Related", references: [id])
  relatedFrom              ContentItem[]              @relation("Related", references: [id])
// missing relation Concepts
}

model ContentItemsOnMediaAsset {
  contentItem   ContentItem @relation(fields: [contentItemId], references: [id])
  contentItemId String
  mediaAsset    MediaAsset  @relation(fields: [mediaAssetId], references: [id])
  mediaAssetId  String

  @@id([contentItemId, mediaAssetId])
}

model MediaAsset {
  id                         String                       @unique @default(uuid())
  title                      String
  description                String
  duration                   Float
  // mediaType as Enum?
  mediaType String
  ContentItemsOnMediaAsset   ContentItemsOnMediaAsset[]
  MediaAssetOnBroadcastEvent MediaAssetOnBroadcastEvent[]
  Transcript                 Transcript[]
  Chapter                    Chapter[]
  // image ... ?
  File File?
}

model MediaAssetOnBroadcastEvent {
  mediaAsset       MediaAsset     @relation(fields: [mediaAssetId], references: [id])
  mediaAssetId     String
  broadcastEvent   BroadcastEvent @relation(fields: [broadcastEventId], references: [id])
  broadcastEventId String

  @@id([mediaAssetId, broadcastEventId])
}

model Chapter {
  id           String     @unique @default(uuid())
  start        String
  duration     Float
  title        String
  meta         String
  mediaAsset   MediaAsset @relation(fields: [mediaAssetId], references: [id])
  mediaAssetId String
  // relation Concepts
}

model BroadcastEvent {
  id                         String                       @unique @default(uuid())
  start                      String
  duration                   Float
  mediaAssetOnBroadcastEvent MediaAssetOnBroadcastEvent[]
  broadcastChannel           BroadcastChannel             @relation(fields: [broadcastChannelId], references: [id])
  broadcastChannelId         String                       @unique
}

model BroadcastChannel {
  id               String           @unique @default(uuid())
  name             String
  publisher        String
  broadcastEvents  BroadcastEvent[]
  broadcastEventId String           @unique
  //one-to-many || many-to-many ?
  publicationChannel PublicationChannel[]
}

model PublicationChannel {
  id      String @unique @default(uuid())
  address String
  broadcatsChannel BroadcastChannel @relation(fields: [broadcastChannelId], references: [id])
  broadcastChannelId String
}

model Transcript {
  id           String     @unique @default(uuid())
  text         String
  engine       String
  mediaAsset   MediaAsset @relation(fields: [mediaAssetId], references: [id])
  mediaAssetId String
}

model Grouping {
  id            String        @unique @default(uuid())
  title         String
  ordinalNumber Int
  contentItems  ContentItem[]
  collection Collection @relation(fields: [collectionId], references: [id])
  collectionId String
}

// name it Listing 
// TODO check completness add relations
model Collection {
  id              String        @unique @default(uuid())
  // as Enum?
  type String
  title           String
  subtitle        String
  summary         String
  description     String
  rssFeedUrl      String
  creationDate    DateTime
  terminationDate DateTime
  contentItems    ContentItem[]
  //shows
  grouping Grouping[]
  //image ... ?
  file File?
}

model File {
  id                 String  @unique @default(uuid())
  contentUrl         String
  mimeType           String
  size               Float
  hash               String
  duration           Float
  codec              String
  bitrate            Float
  resolution         String
  additionalMetadata String
  Image              Image[]
  MediaAsset MediaAsset @relation(fields: [mediaAssetId], references: [id])
  mediaAssetId String
  collection Collection @relation(fields: [collectionId], references: [id])
  collectionId String
  actor Actor @relation(fields: [actorId], references: [id])
  actorId String
  
}

model Image {
  id     String @unique @default(uuid())
  title  String
  alt    String
  file   File   @relation(fields: [fileId], references: [id])
  fileId String
}




// taging and categorization

model Concept {
  id   String @unique @default(uuid())
  originNamespace String
  name String
  summary String
  desciption String
  type String
  wikidataID String
  // missing relation on Concepts
  // hasParentConcept, is ChildOf, isSameAs, image/file
  //missing - many to many -> ContentItem, MediaAsset, Collection, Actor
  
}