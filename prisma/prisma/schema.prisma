datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  theme    = "forrest"
}

model License {
  id                String               @id @unique @default(uuid())
  name              String
  mediaAsset        MediaAsset[]
  contentItem       ContentItem[]
  publicationChanle PublicationChannel[]
  //show === Grouping?
  grouping          Grouping[]
}

model Contribution {
  id          String        @id @unique @default(uuid())
  role        String
  actor       Actor[]
  mediaAsset  MediaAsset[]
  contentItem ContentItem[]
  collection  Collection[]

}

model Actor {
  id                 String       @id @unique @default(uuid())
  name               String
  // better as Enum?
  contactInformation String
  // same as type?
  // type String
  role               String
  // may Image?
  file               File?
  contribution       Contribution @relation(fields: [contributionId], references: [id])
  contributionId     String
  concept            Concept[]
}

model ContentItem {
  id                       String                     @id @unique @default(uuid())
  title                    String
  subtitle                 String
  summary                  String
  fullText                 String
  // What is that for?
  groupingDelta            String
  Collection               Collection?                @relation(fields: [collectionId], references: [id])
  collectionId             String?
  Grouping                 Grouping?                  @relation(fields: [groupingId], references: [id])
  groupingId               String?
  ContentItemsOnMediaAsset ContentItemsOnMediaAsset[]
  // extra Table?!
  relatedTo                ContentItem[]              @relation("Related", references: [id])
  relatedFrom              ContentItem[]              @relation("Related", references: [id])
  license                  License                    @relation(fields: [licenseId], references: [id])
  licenseId                String
  contribution             Contribution               @relation(fields: [ContributionId], references: [id])
  ContributionId           String
  concept                  Concept[]
}

model ContentItemsOnMediaAsset {
  contentItem   ContentItem @relation(fields: [contentItemId], references: [id])
  contentItemId String
  mediaAsset    MediaAsset  @relation(fields: [mediaAssetId], references: [id])
  mediaAssetId  String

  @@id([contentItemId, mediaAssetId])
}

model MediaAsset {
  id                         String                       @id @unique @default(uuid())
  title                      String
  description                String
  duration                   Float
  // mediaType as Enum?
  mediaType                  String
  ContentItemsOnMediaAsset   ContentItemsOnMediaAsset[]
  MediaAssetOnBroadcastEvent MediaAssetOnBroadcastEvent[]
  Transcript                 Transcript[]
  Chapter                    Chapter[]
  // image ... ?
  File                       File?
  license                    License                      @relation(fields: [licenseId], references: [id])
  licenseId                  String
  contribution               Contribution                 @relation(fields: [ContributionId], references: [id])
  ContributionId             String
  concept                    Concept[]
}

model MediaAssetOnBroadcastEvent {
  mediaAsset       MediaAsset     @relation(fields: [mediaAssetId], references: [id])
  mediaAssetId     String
  broadcastEvent   BroadcastEvent @relation(fields: [broadcastEventId], references: [id])
  broadcastEventId String

  @@id([mediaAssetId, broadcastEventId])
}

model Chapter {
  id           String     @id @unique @default(uuid())
  start        String
  duration     Float
  title        String
  meta         String
  mediaAsset   MediaAsset @relation(fields: [mediaAssetId], references: [id])
  mediaAssetId String
}

model BroadcastEvent {
  id                         String                       @id @unique @default(uuid())
  start                      String
  duration                   Float
  mediaAssetOnBroadcastEvent MediaAssetOnBroadcastEvent[]
  broadcastChannel           BroadcastChannel             @relation(fields: [broadcastChannelId], references: [id])
  broadcastChannelId         String                       @unique
}

model BroadcastChannel {
  id                 String               @id @unique @default(uuid())
  name               String
  publisher          String
  broadcastEvents    BroadcastEvent[]
  broadcastEventId   String               @unique
  publicationChannel PublicationChannel[]
}

model PublicationChannel {
  id                 String           @id @unique @default(uuid())
  address            String
  broadcatsChannel   BroadcastChannel @relation(fields: [broadcastChannelId], references: [id])
  broadcastChannelId String
  License            License          @relation(fields: [licenseId], references: [id])
  licenseId          String
}

model Transcript {
  id           String     @id @unique @default(uuid())
  text         String
  engine       String
  mediaAsset   MediaAsset @relation(fields: [mediaAssetId], references: [id])
  mediaAssetId String
}

model Grouping {
  id            String        @id @unique @default(uuid())
  title         String
  ordinalNumber Int
  contentItems  ContentItem[]
  collection    Collection    @relation(fields: [collectionId], references: [id])
  collectionId  String
  License       License       @relation(fields: [licenseId], references: [id])
  licenseId     String
}

// name it Listing
model Collection {
  id              String        @id @unique @default(uuid())
  // as Enum?
  type            String
  title           String
  subtitle        String
  summary         String
  description     String
  rssFeedUrl      String
  creationDate    DateTime
  terminationDate DateTime
  contentItems    ContentItem[]
  //shows
  grouping        Grouping[]
  //image ... ?
  file            File?
  contribution    Contribution  @relation(fields: [ContributionId], references: [id])
  ContributionId  String
  concept         Concept[]
}

model File {
  id                 String     @id @unique @default(uuid())
  contentUrl         String
  mimeType           String
  size               Float
  hash               String
  duration           Float
  codec              String
  bitrate            Float
  resolution         String
  additionalMetadata String
  Image              Image[]
  MediaAsset         MediaAsset @relation(fields: [mediaAssetId], references: [id])
  mediaAssetId       String     @unique
  collection         Collection @relation(fields: [collectionId], references: [id])
  collectionId       String     @unique
  actor              Actor      @relation(fields: [actorId], references: [id])
  actorId            String     @unique

}

model Image {
  id     String @id @unique @default(uuid())
  title  String
  alt    String
  file   File   @relation(fields: [fileId], references: [id])
  fileId String
}

// taging and categorization

model Concept {
  id              String        @id @unique @default(uuid())
  originNamespace String
  name            String
  summary         String
  desciption      String
  type            String
  wikidataID      String
  // missing relation on Concepts
  // hasParentConcept, is ChildOf, isSameAs, image/file
  //missing - many to many -> ContentItem, MediaAsset, Collection, Actor
  contentItem     ContentItem[]
  mediaAsset      MediaAsset[]
  collection      Collection[]
  actor           Actor[]
}
