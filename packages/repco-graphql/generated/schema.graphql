type Actor {
  """Reads and enables pagination through a set of `BroadcastService`."""
  broadcastServicesByPublisher(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastServiceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastServiceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastService`."""
    orderBy: [BroadcastServicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastServicesConnection!
  contactInformation: String!

  """Reads and enables pagination through a set of `Contribution`."""
  contributions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContributionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContributionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contribution`."""
    orderBy: [ContributionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActorContributionsByActorToContributionAAndBManyToManyConnection!
  name: String!
  personOrOrganization: String!

  """Reads a single `File` that is related to this `Actor`."""
  profilePicture: File
  profilePictureUid: String!

  """Reads a single `Revision` that is related to this `Actor`."""
  revision: Revision
  revisionId: String!
  uid: String!
}

"""
A condition to be used against `Actor` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ActorCondition {
  """Checks for equality with the object’s `contactInformation` field."""
  contactInformation: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `personOrOrganization` field."""
  personOrOrganization: String

  """Checks for equality with the object’s `profilePictureUid` field."""
  profilePictureUid: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A connection to a list of `Contribution` values, with data from `_ActorToContribution`.
"""
type ActorContributionsByActorToContributionAAndBManyToManyConnection {
  """
  A list of edges which contains the `Contribution`, info from the `_ActorToContribution`, and the cursor to aid in pagination.
  """
  edges: [ActorContributionsByActorToContributionAAndBManyToManyEdge!]!

  """A list of `Contribution` objects."""
  nodes: [Contribution!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contribution` you could get from the connection."""
  totalCount: Int!
}

"""
A `Contribution` edge in the connection, with data from `_ActorToContribution`.
"""
type ActorContributionsByActorToContributionAAndBManyToManyEdge {
  """Reads and enables pagination through a set of `_ActorToContribution`."""
  _actorToContributionsByB(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ActorToContributionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ActorToContributionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ActorToContribution`."""
    orderBy: [_ActorToContributionsOrderBy!] = [NATURAL]
  ): _ActorToContributionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contribution` at the end of the edge."""
  node: Contribution!
}

"""
A filter to be used against `Actor` object types. All fields are combined with a logical ‘and.’
"""
input ActorFilter {
  """Checks for all expressions in this list."""
  and: [ActorFilter!]

  """Filter by the object’s `contactInformation` field."""
  contactInformation: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: ActorFilter

  """Checks for any expressions in this list."""
  or: [ActorFilter!]

  """Filter by the object’s `personOrOrganization` field."""
  personOrOrganization: StringFilter

  """Filter by the object’s `profilePictureUid` field."""
  profilePictureUid: StringFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""A connection to a list of `Actor` values."""
type ActorsConnection {
  """
  A list of edges which contains the `Actor` and cursor to aid in pagination.
  """
  edges: [ActorsEdge!]!

  """A list of `Actor` objects."""
  nodes: [Actor!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Actor` you could get from the connection."""
  totalCount: Int!
}

"""A `Actor` edge in the connection."""
type ActorsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Actor` at the end of the edge."""
  node: Actor!
}

"""Methods to use when ordering `Actor`."""
enum ActorsOrderBy {
  CONTACT_INFORMATION_ASC
  CONTACT_INFORMATION_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PERSON_OR_ORGANIZATION_ASC
  PERSON_OR_ORGANIZATION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PROFILE_PICTURE_UID_ASC
  PROFILE_PICTURE_UID_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  UID_ASC
  UID_DESC
}

type BroadcastEvent {
  """
  Reads a single `BroadcastService` that is related to this `BroadcastEvent`.
  """
  broadcastService: BroadcastService
  broadcastServiceUid: String!

  """Reads a single `ContentItem` that is related to this `BroadcastEvent`."""
  contentItem: ContentItem
  contentItemUid: String!
  duration: Float!

  """Reads a single `Revision` that is related to this `BroadcastEvent`."""
  revision: Revision
  revisionId: String!
  start: Float!
  uid: String!
}

"""
A condition to be used against `BroadcastEvent` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input BroadcastEventCondition {
  """Checks for equality with the object’s `broadcastServiceUid` field."""
  broadcastServiceUid: String

  """Checks for equality with the object’s `contentItemUid` field."""
  contentItemUid: String

  """Checks for equality with the object’s `duration` field."""
  duration: Float

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `start` field."""
  start: Float

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A filter to be used against `BroadcastEvent` object types. All fields are combined with a logical ‘and.’
"""
input BroadcastEventFilter {
  """Checks for all expressions in this list."""
  and: [BroadcastEventFilter!]

  """Filter by the object’s `broadcastServiceUid` field."""
  broadcastServiceUid: StringFilter

  """Filter by the object’s `contentItemUid` field."""
  contentItemUid: StringFilter

  """Filter by the object’s `duration` field."""
  duration: FloatFilter

  """Negates the expression."""
  not: BroadcastEventFilter

  """Checks for any expressions in this list."""
  or: [BroadcastEventFilter!]

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `start` field."""
  start: FloatFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""A connection to a list of `BroadcastEvent` values."""
type BroadcastEventsConnection {
  """
  A list of edges which contains the `BroadcastEvent` and cursor to aid in pagination.
  """
  edges: [BroadcastEventsEdge!]!

  """A list of `BroadcastEvent` objects."""
  nodes: [BroadcastEvent!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `BroadcastEvent` you could get from the connection."""
  totalCount: Int!
}

"""A `BroadcastEvent` edge in the connection."""
type BroadcastEventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BroadcastEvent` at the end of the edge."""
  node: BroadcastEvent!
}

"""Methods to use when ordering `BroadcastEvent`."""
enum BroadcastEventsOrderBy {
  BROADCAST_SERVICE_UID_ASC
  BROADCAST_SERVICE_UID_DESC
  CONTENT_ITEM_UID_ASC
  CONTENT_ITEM_UID_DESC
  DURATION_ASC
  DURATION_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  START_ASC
  START_DESC
  UID_ASC
  UID_DESC
}

type BroadcastService {
  address: String!

  """Reads and enables pagination through a set of `BroadcastEvent`."""
  broadcastEvents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastEventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastEvent`."""
    orderBy: [BroadcastEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastEventsConnection!

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItemsByBroadcastEventBroadcastServiceUidAndContentItemUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastServiceContentItemsByBroadcastEventBroadcastServiceUidAndContentItemUidManyToManyConnection!
  medium: String!
  name: String!

  """Reads a single `Actor` that is related to this `BroadcastService`."""
  publisher: Actor
  publisherUid: String!

  """Reads a single `Revision` that is related to this `BroadcastService`."""
  revision: Revision
  revisionId: String!
  uid: String!
}

"""
A condition to be used against `BroadcastService` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input BroadcastServiceCondition {
  """Checks for equality with the object’s `address` field."""
  address: String

  """Checks for equality with the object’s `medium` field."""
  medium: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `publisherUid` field."""
  publisherUid: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A connection to a list of `ContentItem` values, with data from `BroadcastEvent`.
"""
type BroadcastServiceContentItemsByBroadcastEventBroadcastServiceUidAndContentItemUidManyToManyConnection {
  """
  A list of edges which contains the `ContentItem`, info from the `BroadcastEvent`, and the cursor to aid in pagination.
  """
  edges: [BroadcastServiceContentItemsByBroadcastEventBroadcastServiceUidAndContentItemUidManyToManyEdge!]!

  """A list of `ContentItem` objects."""
  nodes: [ContentItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ContentItem` you could get from the connection."""
  totalCount: Int!
}

"""
A `ContentItem` edge in the connection, with data from `BroadcastEvent`.
"""
type BroadcastServiceContentItemsByBroadcastEventBroadcastServiceUidAndContentItemUidManyToManyEdge {
  """Reads and enables pagination through a set of `BroadcastEvent`."""
  broadcastEvents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastEventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastEvent`."""
    orderBy: [BroadcastEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastEventsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentItem` at the end of the edge."""
  node: ContentItem!
}

"""
A filter to be used against `BroadcastService` object types. All fields are combined with a logical ‘and.’
"""
input BroadcastServiceFilter {
  """Filter by the object’s `address` field."""
  address: StringFilter

  """Checks for all expressions in this list."""
  and: [BroadcastServiceFilter!]

  """Filter by the object’s `medium` field."""
  medium: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: BroadcastServiceFilter

  """Checks for any expressions in this list."""
  or: [BroadcastServiceFilter!]

  """Filter by the object’s `publisherUid` field."""
  publisherUid: StringFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""A connection to a list of `BroadcastService` values."""
type BroadcastServicesConnection {
  """
  A list of edges which contains the `BroadcastService` and cursor to aid in pagination.
  """
  edges: [BroadcastServicesEdge!]!

  """A list of `BroadcastService` objects."""
  nodes: [BroadcastService!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `BroadcastService` you could get from the connection.
  """
  totalCount: Int!
}

"""A `BroadcastService` edge in the connection."""
type BroadcastServicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BroadcastService` at the end of the edge."""
  node: BroadcastService!
}

"""Methods to use when ordering `BroadcastService`."""
enum BroadcastServicesOrderBy {
  ADDRESS_ASC
  ADDRESS_DESC
  MEDIUM_ASC
  MEDIUM_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUBLISHER_UID_ASC
  PUBLISHER_UID_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  UID_ASC
  UID_DESC
}

type Chapter {
  duration: Float!

  """Reads a single `MediaAsset` that is related to this `Chapter`."""
  mediaAsset: MediaAsset
  mediaAssetUid: String!

  """Reads a single `Revision` that is related to this `Chapter`."""
  revision: Revision
  revisionId: String!
  start: Float!
  title: String!
  type: String!
  uid: String!
}

"""
A condition to be used against `Chapter` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ChapterCondition {
  """Checks for equality with the object’s `duration` field."""
  duration: Float

  """Checks for equality with the object’s `mediaAssetUid` field."""
  mediaAssetUid: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `start` field."""
  start: Float

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A filter to be used against `Chapter` object types. All fields are combined with a logical ‘and.’
"""
input ChapterFilter {
  """Checks for all expressions in this list."""
  and: [ChapterFilter!]

  """Filter by the object’s `duration` field."""
  duration: FloatFilter

  """Filter by the object’s `mediaAssetUid` field."""
  mediaAssetUid: StringFilter

  """Negates the expression."""
  not: ChapterFilter

  """Checks for any expressions in this list."""
  or: [ChapterFilter!]

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `start` field."""
  start: FloatFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""A connection to a list of `Chapter` values."""
type ChaptersConnection {
  """
  A list of edges which contains the `Chapter` and cursor to aid in pagination.
  """
  edges: [ChaptersEdge!]!

  """A list of `Chapter` objects."""
  nodes: [Chapter!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Chapter` you could get from the connection."""
  totalCount: Int!
}

"""A `Chapter` edge in the connection."""
type ChaptersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Chapter` at the end of the edge."""
  node: Chapter!
}

"""Methods to use when ordering `Chapter`."""
enum ChaptersOrderBy {
  DURATION_ASC
  DURATION_DESC
  MEDIA_ASSET_UID_ASC
  MEDIA_ASSET_UID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  START_ASC
  START_DESC
  TITLE_ASC
  TITLE_DESC
  TYPE_ASC
  TYPE_DESC
  UID_ASC
  UID_DESC
}

type Concept {
  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConceptContentItemsByConceptToContentItemAAndBManyToManyConnection!
  description: String!

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConceptMediaAssetsByConceptToMediaAssetAAndBManyToManyConnection!
  name: String!
  originNamespace: String!

  """Reads a single `Revision` that is related to this `Concept`."""
  revision: Revision
  revisionId: String!
  summary: String!
  uid: String!
  wikidataId: String!
}

"""
A condition to be used against `Concept` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ConceptCondition {
  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `originNamespace` field."""
  originNamespace: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `summary` field."""
  summary: String

  """Checks for equality with the object’s `uid` field."""
  uid: String

  """Checks for equality with the object’s `wikidataId` field."""
  wikidataId: String
}

"""
A connection to a list of `ContentItem` values, with data from `_ConceptToContentItem`.
"""
type ConceptContentItemsByConceptToContentItemAAndBManyToManyConnection {
  """
  A list of edges which contains the `ContentItem`, info from the `_ConceptToContentItem`, and the cursor to aid in pagination.
  """
  edges: [ConceptContentItemsByConceptToContentItemAAndBManyToManyEdge!]!

  """A list of `ContentItem` objects."""
  nodes: [ContentItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ContentItem` you could get from the connection."""
  totalCount: Int!
}

"""
A `ContentItem` edge in the connection, with data from `_ConceptToContentItem`.
"""
type ConceptContentItemsByConceptToContentItemAAndBManyToManyEdge {
  """Reads and enables pagination through a set of `_ConceptToContentItem`."""
  _conceptToContentItemsByB(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ConceptToContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ConceptToContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ConceptToContentItem`."""
    orderBy: [_ConceptToContentItemsOrderBy!] = [NATURAL]
  ): _ConceptToContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentItem` at the end of the edge."""
  node: ContentItem!
}

"""
A filter to be used against `Concept` object types. All fields are combined with a logical ‘and.’
"""
input ConceptFilter {
  """Checks for all expressions in this list."""
  and: [ConceptFilter!]

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: ConceptFilter

  """Checks for any expressions in this list."""
  or: [ConceptFilter!]

  """Filter by the object’s `originNamespace` field."""
  originNamespace: StringFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `summary` field."""
  summary: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter

  """Filter by the object’s `wikidataId` field."""
  wikidataId: StringFilter
}

"""
A connection to a list of `MediaAsset` values, with data from `_ConceptToMediaAsset`.
"""
type ConceptMediaAssetsByConceptToMediaAssetAAndBManyToManyConnection {
  """
  A list of edges which contains the `MediaAsset`, info from the `_ConceptToMediaAsset`, and the cursor to aid in pagination.
  """
  edges: [ConceptMediaAssetsByConceptToMediaAssetAAndBManyToManyEdge!]!

  """A list of `MediaAsset` objects."""
  nodes: [MediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MediaAsset` you could get from the connection."""
  totalCount: Int!
}

"""
A `MediaAsset` edge in the connection, with data from `_ConceptToMediaAsset`.
"""
type ConceptMediaAssetsByConceptToMediaAssetAAndBManyToManyEdge {
  """Reads and enables pagination through a set of `_ConceptToMediaAsset`."""
  _conceptToMediaAssetsByB(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ConceptToMediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ConceptToMediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ConceptToMediaAsset`."""
    orderBy: [_ConceptToMediaAssetsOrderBy!] = [NATURAL]
  ): _ConceptToMediaAssetsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MediaAsset` at the end of the edge."""
  node: MediaAsset!
}

"""A connection to a list of `Concept` values."""
type ConceptsConnection {
  """
  A list of edges which contains the `Concept` and cursor to aid in pagination.
  """
  edges: [ConceptsEdge!]!

  """A list of `Concept` objects."""
  nodes: [Concept!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Concept` you could get from the connection."""
  totalCount: Int!
}

"""A `Concept` edge in the connection."""
type ConceptsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Concept` at the end of the edge."""
  node: Concept!
}

"""Methods to use when ordering `Concept`."""
enum ConceptsOrderBy {
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  NAME_ASC
  NAME_DESC
  NATURAL
  ORIGIN_NAMESPACE_ASC
  ORIGIN_NAMESPACE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  SUMMARY_ASC
  SUMMARY_DESC
  UID_ASC
  UID_DESC
  WIKIDATA_ID_ASC
  WIKIDATA_ID_DESC
}

type ContentGrouping {
  broadcastSchedule: String

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentGroupingContentItemsByContentGroupingToContentItemAAndBManyToManyConnection!

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItemsByPrimaryGrouping(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!
  description: String
  groupingType: String!

  """Reads a single `License` that is related to this `ContentGrouping`."""
  license: License
  licenseUid: String

  """Reads and enables pagination through a set of `License`."""
  licensesByContentItemPrimaryGroupingUidAndLicenseUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentGroupingLicensesByContentItemPrimaryGroupingUidAndLicenseUidManyToManyConnection!

  """Reads a single `Revision` that is related to this `ContentGrouping`."""
  revision: Revision
  revisionId: String!
  startingDate: Datetime
  subtitle: String
  summary: String
  terminationDate: Datetime
  title: String!
  uid: String!
  variant: ContentGroupingVariant!
}

"""
A condition to be used against `ContentGrouping` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ContentGroupingCondition {
  """Checks for equality with the object’s `broadcastSchedule` field."""
  broadcastSchedule: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `groupingType` field."""
  groupingType: String

  """Checks for equality with the object’s `licenseUid` field."""
  licenseUid: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `startingDate` field."""
  startingDate: Datetime

  """Checks for equality with the object’s `subtitle` field."""
  subtitle: String

  """Checks for equality with the object’s `summary` field."""
  summary: String

  """Checks for equality with the object’s `terminationDate` field."""
  terminationDate: Datetime

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `uid` field."""
  uid: String

  """Checks for equality with the object’s `variant` field."""
  variant: ContentGroupingVariant
}

"""
A connection to a list of `ContentItem` values, with data from `_ContentGroupingToContentItem`.
"""
type ContentGroupingContentItemsByContentGroupingToContentItemAAndBManyToManyConnection {
  """
  A list of edges which contains the `ContentItem`, info from the `_ContentGroupingToContentItem`, and the cursor to aid in pagination.
  """
  edges: [ContentGroupingContentItemsByContentGroupingToContentItemAAndBManyToManyEdge!]!

  """A list of `ContentItem` objects."""
  nodes: [ContentItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ContentItem` you could get from the connection."""
  totalCount: Int!
}

"""
A `ContentItem` edge in the connection, with data from `_ContentGroupingToContentItem`.
"""
type ContentGroupingContentItemsByContentGroupingToContentItemAAndBManyToManyEdge {
  """
  Reads and enables pagination through a set of `_ContentGroupingToContentItem`.
  """
  _contentGroupingToContentItemsByB(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ContentGroupingToContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ContentGroupingToContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ContentGroupingToContentItem`."""
    orderBy: [_ContentGroupingToContentItemsOrderBy!] = [NATURAL]
  ): _ContentGroupingToContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentItem` at the end of the edge."""
  node: ContentItem!
}

"""
A filter to be used against `ContentGrouping` object types. All fields are combined with a logical ‘and.’
"""
input ContentGroupingFilter {
  """Checks for all expressions in this list."""
  and: [ContentGroupingFilter!]

  """Filter by the object’s `broadcastSchedule` field."""
  broadcastSchedule: StringFilter

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `groupingType` field."""
  groupingType: StringFilter

  """Filter by the object’s `licenseUid` field."""
  licenseUid: StringFilter

  """Negates the expression."""
  not: ContentGroupingFilter

  """Checks for any expressions in this list."""
  or: [ContentGroupingFilter!]

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `startingDate` field."""
  startingDate: DatetimeFilter

  """Filter by the object’s `subtitle` field."""
  subtitle: StringFilter

  """Filter by the object’s `summary` field."""
  summary: StringFilter

  """Filter by the object’s `terminationDate` field."""
  terminationDate: DatetimeFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter

  """Filter by the object’s `variant` field."""
  variant: ContentGroupingVariantFilter
}

"""
A connection to a list of `License` values, with data from `ContentItem`.
"""
type ContentGroupingLicensesByContentItemPrimaryGroupingUidAndLicenseUidManyToManyConnection {
  """
  A list of edges which contains the `License`, info from the `ContentItem`, and the cursor to aid in pagination.
  """
  edges: [ContentGroupingLicensesByContentItemPrimaryGroupingUidAndLicenseUidManyToManyEdge!]!

  """A list of `License` objects."""
  nodes: [License!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `License` you could get from the connection."""
  totalCount: Int!
}

"""A `License` edge in the connection, with data from `ContentItem`."""
type ContentGroupingLicensesByContentItemPrimaryGroupingUidAndLicenseUidManyToManyEdge {
  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `License` at the end of the edge."""
  node: License!
}

enum ContentGroupingVariant {
  EPISODIC
  SERIAL
}

"""
A filter to be used against ContentGroupingVariant fields. All fields are combined with a logical ‘and.’
"""
input ContentGroupingVariantFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: ContentGroupingVariant

  """Equal to the specified value."""
  equalTo: ContentGroupingVariant

  """Greater than the specified value."""
  greaterThan: ContentGroupingVariant

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: ContentGroupingVariant

  """Included in the specified list."""
  in: [ContentGroupingVariant!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: ContentGroupingVariant

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: ContentGroupingVariant

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: ContentGroupingVariant

  """Not equal to the specified value."""
  notEqualTo: ContentGroupingVariant

  """Not included in the specified list."""
  notIn: [ContentGroupingVariant!]
}

"""A connection to a list of `ContentGrouping` values."""
type ContentGroupingsConnection {
  """
  A list of edges which contains the `ContentGrouping` and cursor to aid in pagination.
  """
  edges: [ContentGroupingsEdge!]!

  """A list of `ContentGrouping` objects."""
  nodes: [ContentGrouping!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ContentGrouping` you could get from the connection.
  """
  totalCount: Int!
}

"""A `ContentGrouping` edge in the connection."""
type ContentGroupingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentGrouping` at the end of the edge."""
  node: ContentGrouping!
}

"""Methods to use when ordering `ContentGrouping`."""
enum ContentGroupingsOrderBy {
  BROADCAST_SCHEDULE_ASC
  BROADCAST_SCHEDULE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  GROUPING_TYPE_ASC
  GROUPING_TYPE_DESC
  LICENSE_UID_ASC
  LICENSE_UID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  STARTING_DATE_ASC
  STARTING_DATE_DESC
  SUBTITLE_ASC
  SUBTITLE_DESC
  SUMMARY_ASC
  SUMMARY_DESC
  TERMINATION_DATE_ASC
  TERMINATION_DATE_DESC
  TITLE_ASC
  TITLE_DESC
  UID_ASC
  UID_DESC
  VARIANT_ASC
  VARIANT_DESC
}

type ContentItem {
  """Reads and enables pagination through a set of `BroadcastEvent`."""
  broadcastEvents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastEventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastEvent`."""
    orderBy: [BroadcastEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastEventsConnection!

  """Reads and enables pagination through a set of `BroadcastService`."""
  broadcastServicesByBroadcastEventContentItemUidAndBroadcastServiceUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastServiceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastServiceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastService`."""
    orderBy: [BroadcastServicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemBroadcastServicesByBroadcastEventContentItemUidAndBroadcastServiceUidManyToManyConnection!

  """Reads and enables pagination through a set of `Concept`."""
  concepts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemConceptsByConceptToContentItemBAndAManyToManyConnection!
  content: String!
  contentFormat: String!

  """Reads and enables pagination through a set of `ContentGrouping`."""
  contentGroupings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentGroupingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentGroupingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentGrouping`."""
    orderBy: [ContentGroupingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemContentGroupingsByContentGroupingToContentItemBAndAManyToManyConnection!

  """Reads and enables pagination through a set of `Contribution`."""
  contributions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContributionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContributionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contribution`."""
    orderBy: [ContributionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemContributionsByContentItemToContributionAAndBManyToManyConnection!

  """Reads a single `License` that is related to this `ContentItem`."""
  license: License
  licenseUid: String

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemMediaAssetsByContentItemToMediaAssetAAndBManyToManyConnection!

  """
  Reads a single `ContentGrouping` that is related to this `ContentItem`.
  """
  primaryGrouping: ContentGrouping
  primaryGroupingUid: String
  pubDate: Datetime

  """Reads a single `Revision` that is related to this `ContentItem`."""
  revision: Revision
  revisionId: String!
  subtitle: String
  summary: String
  title: String!
  uid: String!
}

"""
A connection to a list of `BroadcastService` values, with data from `BroadcastEvent`.
"""
type ContentItemBroadcastServicesByBroadcastEventContentItemUidAndBroadcastServiceUidManyToManyConnection {
  """
  A list of edges which contains the `BroadcastService`, info from the `BroadcastEvent`, and the cursor to aid in pagination.
  """
  edges: [ContentItemBroadcastServicesByBroadcastEventContentItemUidAndBroadcastServiceUidManyToManyEdge!]!

  """A list of `BroadcastService` objects."""
  nodes: [BroadcastService!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `BroadcastService` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `BroadcastService` edge in the connection, with data from `BroadcastEvent`.
"""
type ContentItemBroadcastServicesByBroadcastEventContentItemUidAndBroadcastServiceUidManyToManyEdge {
  """Reads and enables pagination through a set of `BroadcastEvent`."""
  broadcastEvents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastEventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastEvent`."""
    orderBy: [BroadcastEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastEventsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BroadcastService` at the end of the edge."""
  node: BroadcastService!
}

"""
A connection to a list of `Concept` values, with data from `_ConceptToContentItem`.
"""
type ContentItemConceptsByConceptToContentItemBAndAManyToManyConnection {
  """
  A list of edges which contains the `Concept`, info from the `_ConceptToContentItem`, and the cursor to aid in pagination.
  """
  edges: [ContentItemConceptsByConceptToContentItemBAndAManyToManyEdge!]!

  """A list of `Concept` objects."""
  nodes: [Concept!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Concept` you could get from the connection."""
  totalCount: Int!
}

"""
A `Concept` edge in the connection, with data from `_ConceptToContentItem`.
"""
type ContentItemConceptsByConceptToContentItemBAndAManyToManyEdge {
  """Reads and enables pagination through a set of `_ConceptToContentItem`."""
  _conceptToContentItemsByA(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ConceptToContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ConceptToContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ConceptToContentItem`."""
    orderBy: [_ConceptToContentItemsOrderBy!] = [NATURAL]
  ): _ConceptToContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Concept` at the end of the edge."""
  node: Concept!
}

"""
A condition to be used against `ContentItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ContentItemCondition {
  """Checks for equality with the object’s `content` field."""
  content: String

  """Checks for equality with the object’s `contentFormat` field."""
  contentFormat: String

  """Checks for equality with the object’s `licenseUid` field."""
  licenseUid: String

  """Checks for equality with the object’s `primaryGroupingUid` field."""
  primaryGroupingUid: String

  """Checks for equality with the object’s `pubDate` field."""
  pubDate: Datetime

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `subtitle` field."""
  subtitle: String

  """Checks for equality with the object’s `summary` field."""
  summary: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A connection to a list of `ContentGrouping` values, with data from `_ContentGroupingToContentItem`.
"""
type ContentItemContentGroupingsByContentGroupingToContentItemBAndAManyToManyConnection {
  """
  A list of edges which contains the `ContentGrouping`, info from the `_ContentGroupingToContentItem`, and the cursor to aid in pagination.
  """
  edges: [ContentItemContentGroupingsByContentGroupingToContentItemBAndAManyToManyEdge!]!

  """A list of `ContentGrouping` objects."""
  nodes: [ContentGrouping!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ContentGrouping` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ContentGrouping` edge in the connection, with data from `_ContentGroupingToContentItem`.
"""
type ContentItemContentGroupingsByContentGroupingToContentItemBAndAManyToManyEdge {
  """
  Reads and enables pagination through a set of `_ContentGroupingToContentItem`.
  """
  _contentGroupingToContentItemsByA(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ContentGroupingToContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ContentGroupingToContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ContentGroupingToContentItem`."""
    orderBy: [_ContentGroupingToContentItemsOrderBy!] = [NATURAL]
  ): _ContentGroupingToContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentGrouping` at the end of the edge."""
  node: ContentGrouping!
}

"""
A connection to a list of `Contribution` values, with data from `_ContentItemToContribution`.
"""
type ContentItemContributionsByContentItemToContributionAAndBManyToManyConnection {
  """
  A list of edges which contains the `Contribution`, info from the `_ContentItemToContribution`, and the cursor to aid in pagination.
  """
  edges: [ContentItemContributionsByContentItemToContributionAAndBManyToManyEdge!]!

  """A list of `Contribution` objects."""
  nodes: [Contribution!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contribution` you could get from the connection."""
  totalCount: Int!
}

"""
A `Contribution` edge in the connection, with data from `_ContentItemToContribution`.
"""
type ContentItemContributionsByContentItemToContributionAAndBManyToManyEdge {
  """
  Reads and enables pagination through a set of `_ContentItemToContribution`.
  """
  _contentItemToContributionsByB(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ContentItemToContributionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ContentItemToContributionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ContentItemToContribution`."""
    orderBy: [_ContentItemToContributionsOrderBy!] = [NATURAL]
  ): _ContentItemToContributionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contribution` at the end of the edge."""
  node: Contribution!
}

"""
A filter to be used against `ContentItem` object types. All fields are combined with a logical ‘and.’
"""
input ContentItemFilter {
  """Checks for all expressions in this list."""
  and: [ContentItemFilter!]

  """Filter by the object’s `content` field."""
  content: StringFilter

  """Filter by the object’s `contentFormat` field."""
  contentFormat: StringFilter

  """Filter by the object’s `licenseUid` field."""
  licenseUid: StringFilter

  """Negates the expression."""
  not: ContentItemFilter

  """Checks for any expressions in this list."""
  or: [ContentItemFilter!]

  """Filter by the object’s `primaryGroupingUid` field."""
  primaryGroupingUid: StringFilter

  """Filter by the object’s `pubDate` field."""
  pubDate: DatetimeFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `subtitle` field."""
  subtitle: StringFilter

  """Filter by the object’s `summary` field."""
  summary: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""
A connection to a list of `MediaAsset` values, with data from `_ContentItemToMediaAsset`.
"""
type ContentItemMediaAssetsByContentItemToMediaAssetAAndBManyToManyConnection {
  """
  A list of edges which contains the `MediaAsset`, info from the `_ContentItemToMediaAsset`, and the cursor to aid in pagination.
  """
  edges: [ContentItemMediaAssetsByContentItemToMediaAssetAAndBManyToManyEdge!]!

  """A list of `MediaAsset` objects."""
  nodes: [MediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MediaAsset` you could get from the connection."""
  totalCount: Int!
}

"""
A `MediaAsset` edge in the connection, with data from `_ContentItemToMediaAsset`.
"""
type ContentItemMediaAssetsByContentItemToMediaAssetAAndBManyToManyEdge {
  """
  Reads and enables pagination through a set of `_ContentItemToMediaAsset`.
  """
  _contentItemToMediaAssetsByB(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ContentItemToMediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ContentItemToMediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ContentItemToMediaAsset`."""
    orderBy: [_ContentItemToMediaAssetsOrderBy!] = [NATURAL]
  ): _ContentItemToMediaAssetsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MediaAsset` at the end of the edge."""
  node: MediaAsset!
}

"""A connection to a list of `ContentItem` values."""
type ContentItemsConnection {
  """
  A list of edges which contains the `ContentItem` and cursor to aid in pagination.
  """
  edges: [ContentItemsEdge!]!

  """A list of `ContentItem` objects."""
  nodes: [ContentItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ContentItem` you could get from the connection."""
  totalCount: Int!
}

"""A `ContentItem` edge in the connection."""
type ContentItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentItem` at the end of the edge."""
  node: ContentItem!
}

"""Methods to use when ordering `ContentItem`."""
enum ContentItemsOrderBy {
  CONTENT_ASC
  CONTENT_DESC
  CONTENT_FORMAT_ASC
  CONTENT_FORMAT_DESC
  LICENSE_UID_ASC
  LICENSE_UID_DESC
  NATURAL
  PRIMARY_GROUPING_UID_ASC
  PRIMARY_GROUPING_UID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  PUB_DATE_ASC
  PUB_DATE_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  SUBTITLE_ASC
  SUBTITLE_DESC
  SUMMARY_ASC
  SUMMARY_DESC
  TITLE_ASC
  TITLE_DESC
  UID_ASC
  UID_DESC
}

type Contribution {
  """Reads and enables pagination through a set of `Actor`."""
  actors(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Actor`."""
    orderBy: [ActorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContributionActorsByActorToContributionBAndAManyToManyConnection!

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContributionContentItemsByContentItemToContributionBAndAManyToManyConnection!

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContributionMediaAssetsByContributionToMediaAssetAAndBManyToManyConnection!

  """Reads a single `Revision` that is related to this `Contribution`."""
  revision: Revision
  revisionId: String!
  role: String!
  uid: String!
}

"""
A connection to a list of `Actor` values, with data from `_ActorToContribution`.
"""
type ContributionActorsByActorToContributionBAndAManyToManyConnection {
  """
  A list of edges which contains the `Actor`, info from the `_ActorToContribution`, and the cursor to aid in pagination.
  """
  edges: [ContributionActorsByActorToContributionBAndAManyToManyEdge!]!

  """A list of `Actor` objects."""
  nodes: [Actor!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Actor` you could get from the connection."""
  totalCount: Int!
}

"""
A `Actor` edge in the connection, with data from `_ActorToContribution`.
"""
type ContributionActorsByActorToContributionBAndAManyToManyEdge {
  """Reads and enables pagination through a set of `_ActorToContribution`."""
  _actorToContributionsByA(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ActorToContributionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ActorToContributionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ActorToContribution`."""
    orderBy: [_ActorToContributionsOrderBy!] = [NATURAL]
  ): _ActorToContributionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Actor` at the end of the edge."""
  node: Actor!
}

"""
A condition to be used against `Contribution` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ContributionCondition {
  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `role` field."""
  role: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A connection to a list of `ContentItem` values, with data from `_ContentItemToContribution`.
"""
type ContributionContentItemsByContentItemToContributionBAndAManyToManyConnection {
  """
  A list of edges which contains the `ContentItem`, info from the `_ContentItemToContribution`, and the cursor to aid in pagination.
  """
  edges: [ContributionContentItemsByContentItemToContributionBAndAManyToManyEdge!]!

  """A list of `ContentItem` objects."""
  nodes: [ContentItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ContentItem` you could get from the connection."""
  totalCount: Int!
}

"""
A `ContentItem` edge in the connection, with data from `_ContentItemToContribution`.
"""
type ContributionContentItemsByContentItemToContributionBAndAManyToManyEdge {
  """
  Reads and enables pagination through a set of `_ContentItemToContribution`.
  """
  _contentItemToContributionsByA(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ContentItemToContributionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ContentItemToContributionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ContentItemToContribution`."""
    orderBy: [_ContentItemToContributionsOrderBy!] = [NATURAL]
  ): _ContentItemToContributionsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentItem` at the end of the edge."""
  node: ContentItem!
}

"""
A filter to be used against `Contribution` object types. All fields are combined with a logical ‘and.’
"""
input ContributionFilter {
  """Checks for all expressions in this list."""
  and: [ContributionFilter!]

  """Negates the expression."""
  not: ContributionFilter

  """Checks for any expressions in this list."""
  or: [ContributionFilter!]

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `role` field."""
  role: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""
A connection to a list of `MediaAsset` values, with data from `_ContributionToMediaAsset`.
"""
type ContributionMediaAssetsByContributionToMediaAssetAAndBManyToManyConnection {
  """
  A list of edges which contains the `MediaAsset`, info from the `_ContributionToMediaAsset`, and the cursor to aid in pagination.
  """
  edges: [ContributionMediaAssetsByContributionToMediaAssetAAndBManyToManyEdge!]!

  """A list of `MediaAsset` objects."""
  nodes: [MediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MediaAsset` you could get from the connection."""
  totalCount: Int!
}

"""
A `MediaAsset` edge in the connection, with data from `_ContributionToMediaAsset`.
"""
type ContributionMediaAssetsByContributionToMediaAssetAAndBManyToManyEdge {
  """
  Reads and enables pagination through a set of `_ContributionToMediaAsset`.
  """
  _contributionToMediaAssetsByB(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ContributionToMediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ContributionToMediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ContributionToMediaAsset`."""
    orderBy: [_ContributionToMediaAssetsOrderBy!] = [NATURAL]
  ): _ContributionToMediaAssetsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MediaAsset` at the end of the edge."""
  node: MediaAsset!
}

"""A connection to a list of `Contribution` values."""
type ContributionsConnection {
  """
  A list of edges which contains the `Contribution` and cursor to aid in pagination.
  """
  edges: [ContributionsEdge!]!

  """A list of `Contribution` objects."""
  nodes: [Contribution!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contribution` you could get from the connection."""
  totalCount: Int!
}

"""A `Contribution` edge in the connection."""
type ContributionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contribution` at the end of the edge."""
  node: Contribution!
}

"""Methods to use when ordering `Contribution`."""
enum ContributionsOrderBy {
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  ROLE_ASC
  ROLE_DESC
  UID_ASC
  UID_DESC
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

type DataSource {
  config: JSON
  cursor: String!
  pluginUid: String
  uid: String!
}

"""
A condition to be used against `DataSource` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DataSourceCondition {
  """Checks for equality with the object’s `config` field."""
  config: JSON

  """Checks for equality with the object’s `cursor` field."""
  cursor: String

  """Checks for equality with the object’s `pluginUid` field."""
  pluginUid: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A filter to be used against `DataSource` object types. All fields are combined with a logical ‘and.’
"""
input DataSourceFilter {
  """Checks for all expressions in this list."""
  and: [DataSourceFilter!]

  """Filter by the object’s `config` field."""
  config: JSONFilter

  """Filter by the object’s `cursor` field."""
  cursor: StringFilter

  """Negates the expression."""
  not: DataSourceFilter

  """Checks for any expressions in this list."""
  or: [DataSourceFilter!]

  """Filter by the object’s `pluginUid` field."""
  pluginUid: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""A connection to a list of `DataSource` values."""
type DataSourcesConnection {
  """
  A list of edges which contains the `DataSource` and cursor to aid in pagination.
  """
  edges: [DataSourcesEdge!]!

  """A list of `DataSource` objects."""
  nodes: [DataSource!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `DataSource` you could get from the connection."""
  totalCount: Int!
}

"""A `DataSource` edge in the connection."""
type DataSourcesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `DataSource` at the end of the edge."""
  node: DataSource!
}

"""Methods to use when ordering `DataSource`."""
enum DataSourcesOrderBy {
  CONFIG_ASC
  CONFIG_DESC
  CURSOR_ASC
  CURSOR_DESC
  NATURAL
  PLUGIN_UID_ASC
  PLUGIN_UID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  UID_ASC
  UID_DESC
}

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""
A filter to be used against Datetime fields. All fields are combined with a logical ‘and.’
"""
input DatetimeFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Datetime

  """Equal to the specified value."""
  equalTo: Datetime

  """Greater than the specified value."""
  greaterThan: Datetime

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Datetime

  """Included in the specified list."""
  in: [Datetime!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Datetime

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Datetime

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Datetime

  """Not equal to the specified value."""
  notEqualTo: Datetime

  """Not included in the specified list."""
  notIn: [Datetime!]
}

type File {
  """Reads and enables pagination through a set of `Actor`."""
  actorsByProfilePicture(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Actor`."""
    orderBy: [ActorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActorsConnection!
  additionalMetadata: String
  bitrate: Int
  codec: String
  contentUrl: String!
  duration: Float

  """Reads and enables pagination through a set of `File`."""
  filesByMediaAssetFileUidAndTeaserImageUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FileFilesByMediaAssetFileUidAndTeaserImageUidManyToManyConnection!

  """Reads and enables pagination through a set of `File`."""
  filesByMediaAssetTeaserImageUidAndFileUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FileFilesByMediaAssetTeaserImageUidAndFileUidManyToManyConnection!

  """Reads and enables pagination through a set of `License`."""
  licensesByMediaAssetFileUidAndLicenseUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FileLicensesByMediaAssetFileUidAndLicenseUidManyToManyConnection!

  """Reads and enables pagination through a set of `License`."""
  licensesByMediaAssetTeaserImageUidAndLicenseUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FileLicensesByMediaAssetTeaserImageUidAndLicenseUidManyToManyConnection!

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssetsByTeaserImage(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!
  mimeType: String
  multihash: String
  resolution: String

  """Reads a single `Revision` that is related to this `File`."""
  revision: Revision
  revisionId: String!
  uid: String!
}

"""
A condition to be used against `File` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FileCondition {
  """Checks for equality with the object’s `additionalMetadata` field."""
  additionalMetadata: String

  """Checks for equality with the object’s `bitrate` field."""
  bitrate: Int

  """Checks for equality with the object’s `codec` field."""
  codec: String

  """Checks for equality with the object’s `contentUrl` field."""
  contentUrl: String

  """Checks for equality with the object’s `duration` field."""
  duration: Float

  """Checks for equality with the object’s `mimeType` field."""
  mimeType: String

  """Checks for equality with the object’s `multihash` field."""
  multihash: String

  """Checks for equality with the object’s `resolution` field."""
  resolution: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""A connection to a list of `File` values, with data from `MediaAsset`."""
type FileFilesByMediaAssetFileUidAndTeaserImageUidManyToManyConnection {
  """
  A list of edges which contains the `File`, info from the `MediaAsset`, and the cursor to aid in pagination.
  """
  edges: [FileFilesByMediaAssetFileUidAndTeaserImageUidManyToManyEdge!]!

  """A list of `File` objects."""
  nodes: [File!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection, with data from `MediaAsset`."""
type FileFilesByMediaAssetFileUidAndTeaserImageUidManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssetsByTeaserImage(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!

  """The `File` at the end of the edge."""
  node: File!
}

"""A connection to a list of `File` values, with data from `MediaAsset`."""
type FileFilesByMediaAssetTeaserImageUidAndFileUidManyToManyConnection {
  """
  A list of edges which contains the `File`, info from the `MediaAsset`, and the cursor to aid in pagination.
  """
  edges: [FileFilesByMediaAssetTeaserImageUidAndFileUidManyToManyEdge!]!

  """A list of `File` objects."""
  nodes: [File!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection, with data from `MediaAsset`."""
type FileFilesByMediaAssetTeaserImageUidAndFileUidManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!

  """The `File` at the end of the edge."""
  node: File!
}

"""
A filter to be used against `File` object types. All fields are combined with a logical ‘and.’
"""
input FileFilter {
  """Filter by the object’s `additionalMetadata` field."""
  additionalMetadata: StringFilter

  """Checks for all expressions in this list."""
  and: [FileFilter!]

  """Filter by the object’s `bitrate` field."""
  bitrate: IntFilter

  """Filter by the object’s `codec` field."""
  codec: StringFilter

  """Filter by the object’s `contentUrl` field."""
  contentUrl: StringFilter

  """Filter by the object’s `duration` field."""
  duration: FloatFilter

  """Filter by the object’s `mimeType` field."""
  mimeType: StringFilter

  """Filter by the object’s `multihash` field."""
  multihash: StringFilter

  """Negates the expression."""
  not: FileFilter

  """Checks for any expressions in this list."""
  or: [FileFilter!]

  """Filter by the object’s `resolution` field."""
  resolution: StringFilter

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""
A connection to a list of `License` values, with data from `MediaAsset`.
"""
type FileLicensesByMediaAssetFileUidAndLicenseUidManyToManyConnection {
  """
  A list of edges which contains the `License`, info from the `MediaAsset`, and the cursor to aid in pagination.
  """
  edges: [FileLicensesByMediaAssetFileUidAndLicenseUidManyToManyEdge!]!

  """A list of `License` objects."""
  nodes: [License!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `License` you could get from the connection."""
  totalCount: Int!
}

"""A `License` edge in the connection, with data from `MediaAsset`."""
type FileLicensesByMediaAssetFileUidAndLicenseUidManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!

  """The `License` at the end of the edge."""
  node: License!
}

"""
A connection to a list of `License` values, with data from `MediaAsset`.
"""
type FileLicensesByMediaAssetTeaserImageUidAndLicenseUidManyToManyConnection {
  """
  A list of edges which contains the `License`, info from the `MediaAsset`, and the cursor to aid in pagination.
  """
  edges: [FileLicensesByMediaAssetTeaserImageUidAndLicenseUidManyToManyEdge!]!

  """A list of `License` objects."""
  nodes: [License!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `License` you could get from the connection."""
  totalCount: Int!
}

"""A `License` edge in the connection, with data from `MediaAsset`."""
type FileLicensesByMediaAssetTeaserImageUidAndLicenseUidManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!

  """The `License` at the end of the edge."""
  node: License!
}

"""A connection to a list of `File` values."""
type FilesConnection {
  """
  A list of edges which contains the `File` and cursor to aid in pagination.
  """
  edges: [FilesEdge!]!

  """A list of `File` objects."""
  nodes: [File!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection."""
type FilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `File` at the end of the edge."""
  node: File!
}

"""Methods to use when ordering `File`."""
enum FilesOrderBy {
  ADDITIONAL_METADATA_ASC
  ADDITIONAL_METADATA_DESC
  BITRATE_ASC
  BITRATE_DESC
  CODEC_ASC
  CODEC_DESC
  CONTENT_URL_ASC
  CONTENT_URL_DESC
  DURATION_ASC
  DURATION_DESC
  MIME_TYPE_ASC
  MIME_TYPE_DESC
  MULTIHASH_ASC
  MULTIHASH_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  RESOLUTION_ASC
  RESOLUTION_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  UID_ASC
  UID_DESC
}

"""
A filter to be used against Float fields. All fields are combined with a logical ‘and.’
"""
input FloatFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Float

  """Equal to the specified value."""
  equalTo: Float

  """Greater than the specified value."""
  greaterThan: Float

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Float

  """Included in the specified list."""
  in: [Float!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Float

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Float

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Float

  """Not equal to the specified value."""
  notEqualTo: Float

  """Not included in the specified list."""
  notIn: [Float!]
}

"""
A filter to be used against Int fields. All fields are combined with a logical ‘and.’
"""
input IntFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: Int

  """Equal to the specified value."""
  equalTo: Int

  """Greater than the specified value."""
  greaterThan: Int

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: Int

  """Included in the specified list."""
  in: [Int!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: Int

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: Int

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: Int

  """Not equal to the specified value."""
  notEqualTo: Int

  """Not included in the specified list."""
  notIn: [Int!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

"""
A filter to be used against JSON fields. All fields are combined with a logical ‘and.’
"""
input JSONFilter {
  """Contained by the specified JSON."""
  containedBy: JSON

  """Contains the specified JSON."""
  contains: JSON

  """Contains all of the specified keys."""
  containsAllKeys: [String!]

  """Contains any of the specified keys."""
  containsAnyKeys: [String!]

  """Contains the specified key."""
  containsKey: String

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: JSON

  """Equal to the specified value."""
  equalTo: JSON

  """Greater than the specified value."""
  greaterThan: JSON

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: JSON

  """Included in the specified list."""
  in: [JSON!]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: JSON

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: JSON

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: JSON

  """Not equal to the specified value."""
  notEqualTo: JSON

  """Not included in the specified list."""
  notIn: [JSON!]
}

type License {
  """Reads and enables pagination through a set of `ContentGrouping`."""
  contentGroupings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentGroupingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentGroupingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentGrouping`."""
    orderBy: [ContentGroupingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentGroupingsConnection!

  """Reads and enables pagination through a set of `ContentGrouping`."""
  contentGroupingsByContentItemLicenseUidAndPrimaryGroupingUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentGroupingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentGroupingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentGrouping`."""
    orderBy: [ContentGroupingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicenseContentGroupingsByContentItemLicenseUidAndPrimaryGroupingUidManyToManyConnection!

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!

  """Reads and enables pagination through a set of `File`."""
  filesByMediaAssetLicenseUidAndFileUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicenseFilesByMediaAssetLicenseUidAndFileUidManyToManyConnection!

  """Reads and enables pagination through a set of `File`."""
  filesByMediaAssetLicenseUidAndTeaserImageUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicenseFilesByMediaAssetLicenseUidAndTeaserImageUidManyToManyConnection!

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!
  name: String!

  """Reads a single `Revision` that is related to this `License`."""
  revision: Revision
  revisionId: String!
  uid: String!
}

"""
A condition to be used against `License` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input LicenseCondition {
  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A connection to a list of `ContentGrouping` values, with data from `ContentItem`.
"""
type LicenseContentGroupingsByContentItemLicenseUidAndPrimaryGroupingUidManyToManyConnection {
  """
  A list of edges which contains the `ContentGrouping`, info from the `ContentItem`, and the cursor to aid in pagination.
  """
  edges: [LicenseContentGroupingsByContentItemLicenseUidAndPrimaryGroupingUidManyToManyEdge!]!

  """A list of `ContentGrouping` objects."""
  nodes: [ContentGrouping!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ContentGrouping` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ContentGrouping` edge in the connection, with data from `ContentItem`.
"""
type LicenseContentGroupingsByContentItemLicenseUidAndPrimaryGroupingUidManyToManyEdge {
  """Reads and enables pagination through a set of `ContentItem`."""
  contentItemsByPrimaryGrouping(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentGrouping` at the end of the edge."""
  node: ContentGrouping!
}

"""A connection to a list of `File` values, with data from `MediaAsset`."""
type LicenseFilesByMediaAssetLicenseUidAndFileUidManyToManyConnection {
  """
  A list of edges which contains the `File`, info from the `MediaAsset`, and the cursor to aid in pagination.
  """
  edges: [LicenseFilesByMediaAssetLicenseUidAndFileUidManyToManyEdge!]!

  """A list of `File` objects."""
  nodes: [File!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection, with data from `MediaAsset`."""
type LicenseFilesByMediaAssetLicenseUidAndFileUidManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!

  """The `File` at the end of the edge."""
  node: File!
}

"""A connection to a list of `File` values, with data from `MediaAsset`."""
type LicenseFilesByMediaAssetLicenseUidAndTeaserImageUidManyToManyConnection {
  """
  A list of edges which contains the `File`, info from the `MediaAsset`, and the cursor to aid in pagination.
  """
  edges: [LicenseFilesByMediaAssetLicenseUidAndTeaserImageUidManyToManyEdge!]!

  """A list of `File` objects."""
  nodes: [File!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection, with data from `MediaAsset`."""
type LicenseFilesByMediaAssetLicenseUidAndTeaserImageUidManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssetsByTeaserImage(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!

  """The `File` at the end of the edge."""
  node: File!
}

"""
A filter to be used against `License` object types. All fields are combined with a logical ‘and.’
"""
input LicenseFilter {
  """Checks for all expressions in this list."""
  and: [LicenseFilter!]

  """Filter by the object’s `name` field."""
  name: StringFilter

  """Negates the expression."""
  not: LicenseFilter

  """Checks for any expressions in this list."""
  or: [LicenseFilter!]

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""A connection to a list of `License` values."""
type LicensesConnection {
  """
  A list of edges which contains the `License` and cursor to aid in pagination.
  """
  edges: [LicensesEdge!]!

  """A list of `License` objects."""
  nodes: [License!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `License` you could get from the connection."""
  totalCount: Int!
}

"""A `License` edge in the connection."""
type LicensesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `License` at the end of the edge."""
  node: License!
}

"""Methods to use when ordering `License`."""
enum LicensesOrderBy {
  NAME_ASC
  NAME_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  UID_ASC
  UID_DESC
}

type MediaAsset {
  """Reads and enables pagination through a set of `Chapter`."""
  chapters(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChapterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChapterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Chapter`."""
    orderBy: [ChaptersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChaptersConnection!

  """Reads and enables pagination through a set of `Concept`."""
  concepts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetConceptsByConceptToMediaAssetBAndAManyToManyConnection!

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetContentItemsByContentItemToMediaAssetBAndAManyToManyConnection!

  """Reads and enables pagination through a set of `Contribution`."""
  contributions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContributionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContributionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contribution`."""
    orderBy: [ContributionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetContributionsByContributionToMediaAssetBAndAManyToManyConnection!
  description: String
  duration: Float

  """Reads a single `File` that is related to this `MediaAsset`."""
  file: File
  fileUid: String!

  """Reads a single `License` that is related to this `MediaAsset`."""
  license: License
  licenseUid: String
  mediaType: String!

  """Reads a single `Revision` that is related to this `MediaAsset`."""
  revision: Revision
  revisionId: String!

  """Reads a single `File` that is related to this `MediaAsset`."""
  teaserImage: File
  teaserImageUid: String
  title: String!

  """Reads and enables pagination through a set of `Transcript`."""
  transcripts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TranscriptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TranscriptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Transcript`."""
    orderBy: [TranscriptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TranscriptsConnection!
  uid: String!
}

"""
A connection to a list of `Concept` values, with data from `_ConceptToMediaAsset`.
"""
type MediaAssetConceptsByConceptToMediaAssetBAndAManyToManyConnection {
  """
  A list of edges which contains the `Concept`, info from the `_ConceptToMediaAsset`, and the cursor to aid in pagination.
  """
  edges: [MediaAssetConceptsByConceptToMediaAssetBAndAManyToManyEdge!]!

  """A list of `Concept` objects."""
  nodes: [Concept!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Concept` you could get from the connection."""
  totalCount: Int!
}

"""
A `Concept` edge in the connection, with data from `_ConceptToMediaAsset`.
"""
type MediaAssetConceptsByConceptToMediaAssetBAndAManyToManyEdge {
  """Reads and enables pagination through a set of `_ConceptToMediaAsset`."""
  _conceptToMediaAssetsByA(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ConceptToMediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ConceptToMediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ConceptToMediaAsset`."""
    orderBy: [_ConceptToMediaAssetsOrderBy!] = [NATURAL]
  ): _ConceptToMediaAssetsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Concept` at the end of the edge."""
  node: Concept!
}

"""
A condition to be used against `MediaAsset` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MediaAssetCondition {
  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `duration` field."""
  duration: Float

  """Checks for equality with the object’s `fileUid` field."""
  fileUid: String

  """Checks for equality with the object’s `licenseUid` field."""
  licenseUid: String

  """Checks for equality with the object’s `mediaType` field."""
  mediaType: String

  """Checks for equality with the object’s `revisionId` field."""
  revisionId: String

  """Checks for equality with the object’s `teaserImageUid` field."""
  teaserImageUid: String

  """Checks for equality with the object’s `title` field."""
  title: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A connection to a list of `ContentItem` values, with data from `_ContentItemToMediaAsset`.
"""
type MediaAssetContentItemsByContentItemToMediaAssetBAndAManyToManyConnection {
  """
  A list of edges which contains the `ContentItem`, info from the `_ContentItemToMediaAsset`, and the cursor to aid in pagination.
  """
  edges: [MediaAssetContentItemsByContentItemToMediaAssetBAndAManyToManyEdge!]!

  """A list of `ContentItem` objects."""
  nodes: [ContentItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ContentItem` you could get from the connection."""
  totalCount: Int!
}

"""
A `ContentItem` edge in the connection, with data from `_ContentItemToMediaAsset`.
"""
type MediaAssetContentItemsByContentItemToMediaAssetBAndAManyToManyEdge {
  """
  Reads and enables pagination through a set of `_ContentItemToMediaAsset`.
  """
  _contentItemToMediaAssetsByA(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ContentItemToMediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ContentItemToMediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ContentItemToMediaAsset`."""
    orderBy: [_ContentItemToMediaAssetsOrderBy!] = [NATURAL]
  ): _ContentItemToMediaAssetsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentItem` at the end of the edge."""
  node: ContentItem!
}

"""
A connection to a list of `Contribution` values, with data from `_ContributionToMediaAsset`.
"""
type MediaAssetContributionsByContributionToMediaAssetBAndAManyToManyConnection {
  """
  A list of edges which contains the `Contribution`, info from the `_ContributionToMediaAsset`, and the cursor to aid in pagination.
  """
  edges: [MediaAssetContributionsByContributionToMediaAssetBAndAManyToManyEdge!]!

  """A list of `Contribution` objects."""
  nodes: [Contribution!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Contribution` you could get from the connection."""
  totalCount: Int!
}

"""
A `Contribution` edge in the connection, with data from `_ContributionToMediaAsset`.
"""
type MediaAssetContributionsByContributionToMediaAssetBAndAManyToManyEdge {
  """
  Reads and enables pagination through a set of `_ContributionToMediaAsset`.
  """
  _contributionToMediaAssetsByA(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: _ContributionToMediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: _ContributionToMediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `_ContributionToMediaAsset`."""
    orderBy: [_ContributionToMediaAssetsOrderBy!] = [NATURAL]
  ): _ContributionToMediaAssetsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Contribution` at the end of the edge."""
  node: Contribution!
}

"""
A filter to be used against `MediaAsset` object types. All fields are combined with a logical ‘and.’
"""
input MediaAssetFilter {
  """Checks for all expressions in this list."""
  and: [MediaAssetFilter!]

  """Filter by the object’s `description` field."""
  description: StringFilter

  """Filter by the object’s `duration` field."""
  duration: FloatFilter

  """Filter by the object’s `fileUid` field."""
  fileUid: StringFilter

  """Filter by the object’s `licenseUid` field."""
  licenseUid: StringFilter

  """Filter by the object’s `mediaType` field."""
  mediaType: StringFilter

  """Negates the expression."""
  not: MediaAssetFilter

  """Checks for any expressions in this list."""
  or: [MediaAssetFilter!]

  """Filter by the object’s `revisionId` field."""
  revisionId: StringFilter

  """Filter by the object’s `teaserImageUid` field."""
  teaserImageUid: StringFilter

  """Filter by the object’s `title` field."""
  title: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""A connection to a list of `MediaAsset` values."""
type MediaAssetsConnection {
  """
  A list of edges which contains the `MediaAsset` and cursor to aid in pagination.
  """
  edges: [MediaAssetsEdge!]!

  """A list of `MediaAsset` objects."""
  nodes: [MediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MediaAsset` you could get from the connection."""
  totalCount: Int!
}

"""A `MediaAsset` edge in the connection."""
type MediaAssetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MediaAsset` at the end of the edge."""
  node: MediaAsset!
}

"""Methods to use when ordering `MediaAsset`."""
enum MediaAssetsOrderBy {
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  DURATION_ASC
  DURATION_DESC
  FILE_UID_ASC
  FILE_UID_DESC
  LICENSE_UID_ASC
  LICENSE_UID_DESC
  MEDIA_TYPE_ASC
  MEDIA_TYPE_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  REVISION_ID_ASC
  REVISION_ID_DESC
  TEASER_IMAGE_UID_ASC
  TEASER_IMAGE_UID_DESC
  TITLE_ASC
  TITLE_DESC
  UID_ASC
  UID_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor

  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
}

"""The root query type which gives access points into the data universe."""
type Query {
  actor(uid: String!): Actor

  """Reads and enables pagination through a set of `Actor`."""
  actors(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Actor`."""
    orderBy: [ActorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActorsConnection
  broadcastEvent(uid: String!): BroadcastEvent

  """Reads and enables pagination through a set of `BroadcastEvent`."""
  broadcastEvents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastEventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastEvent`."""
    orderBy: [BroadcastEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastEventsConnection
  broadcastService(uid: String!): BroadcastService

  """Reads and enables pagination through a set of `BroadcastService`."""
  broadcastServices(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastServiceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastServiceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastService`."""
    orderBy: [BroadcastServicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastServicesConnection
  chapter(uid: String!): Chapter

  """Reads and enables pagination through a set of `Chapter`."""
  chapters(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChapterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChapterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Chapter`."""
    orderBy: [ChaptersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChaptersConnection
  concept(uid: String!): Concept

  """Reads and enables pagination through a set of `Concept`."""
  concepts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConceptsConnection
  contentGrouping(uid: String!): ContentGrouping

  """Reads and enables pagination through a set of `ContentGrouping`."""
  contentGroupings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentGroupingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentGroupingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentGrouping`."""
    orderBy: [ContentGroupingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentGroupingsConnection
  contentItem(uid: String!): ContentItem

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection
  contribution(uid: String!): Contribution

  """Reads and enables pagination through a set of `Contribution`."""
  contributions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContributionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContributionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contribution`."""
    orderBy: [ContributionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContributionsConnection
  dataSource(uid: String!): DataSource

  """Reads and enables pagination through a set of `DataSource`."""
  dataSources(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DataSourceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: DataSourceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `DataSource`."""
    orderBy: [DataSourcesOrderBy!] = [PRIMARY_KEY_ASC]
  ): DataSourcesConnection
  file(uid: String!): File

  """Reads and enables pagination through a set of `File`."""
  files(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilesConnection
  license(uid: String!): License

  """Reads and enables pagination through a set of `License`."""
  licenses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicensesConnection
  mediaAsset(uid: String!): MediaAsset

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection

  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!
  revision(rowId: String!): Revision

  """Reads and enables pagination through a set of `Revision`."""
  revisions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Revision`."""
    orderBy: [RevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionsConnection
  transcript(uid: String!): Transcript

  """Reads and enables pagination through a set of `Transcript`."""
  transcripts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TranscriptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: TranscriptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Transcript`."""
    orderBy: [TranscriptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): TranscriptsConnection
}

type Revision {
  """Reads and enables pagination through a set of `Actor`."""
  actors(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Actor`."""
    orderBy: [ActorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActorsConnection!

  """Reads and enables pagination through a set of `Actor`."""
  actorsByBroadcastServiceRevisionIdAndPublisherUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Actor`."""
    orderBy: [ActorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionActorsByBroadcastServiceRevisionIdAndPublisherUidManyToManyConnection!
  alternativeIds: [String]

  """Reads and enables pagination through a set of `BroadcastEvent`."""
  broadcastEvents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastEventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastEvent`."""
    orderBy: [BroadcastEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastEventsConnection!

  """Reads and enables pagination through a set of `BroadcastService`."""
  broadcastServices(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastServiceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastServiceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastService`."""
    orderBy: [BroadcastServicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastServicesConnection!

  """Reads and enables pagination through a set of `BroadcastService`."""
  broadcastServicesByBroadcastEventRevisionIdAndBroadcastServiceUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastServiceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastServiceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastService`."""
    orderBy: [BroadcastServicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionBroadcastServicesByBroadcastEventRevisionIdAndBroadcastServiceUidManyToManyConnection!

  """Reads and enables pagination through a set of `Chapter`."""
  chapters(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChapterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChapterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Chapter`."""
    orderBy: [ChaptersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChaptersConnection!

  """Reads and enables pagination through a set of `Concept`."""
  concepts(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConceptCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ConceptFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Concept`."""
    orderBy: [ConceptsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ConceptsConnection!
  content: JSON!

  """Reads and enables pagination through a set of `ContentGrouping`."""
  contentGroupings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentGroupingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentGroupingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentGrouping`."""
    orderBy: [ContentGroupingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentGroupingsConnection!

  """Reads and enables pagination through a set of `ContentGrouping`."""
  contentGroupingsByContentItemRevisionIdAndPrimaryGroupingUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentGroupingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentGroupingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentGrouping`."""
    orderBy: [ContentGroupingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionContentGroupingsByContentItemRevisionIdAndPrimaryGroupingUidManyToManyConnection!

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!

  """Reads and enables pagination through a set of `ContentItem`."""
  contentItemsByBroadcastEventRevisionIdAndContentItemUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionContentItemsByBroadcastEventRevisionIdAndContentItemUidManyToManyConnection!

  """Reads and enables pagination through a set of `Contribution`."""
  contributions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContributionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContributionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Contribution`."""
    orderBy: [ContributionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContributionsConnection!
  created: Datetime!
  datasource: String!

  """Reads and enables pagination through a set of `File`."""
  files(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): FilesConnection!

  """Reads and enables pagination through a set of `File`."""
  filesByActorRevisionIdAndProfilePictureUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionFilesByActorRevisionIdAndProfilePictureUidManyToManyConnection!

  """Reads and enables pagination through a set of `File`."""
  filesByMediaAssetRevisionIdAndFileUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionFilesByMediaAssetRevisionIdAndFileUidManyToManyConnection!

  """Reads and enables pagination through a set of `File`."""
  filesByMediaAssetRevisionIdAndTeaserImageUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FileCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: FileFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `File`."""
    orderBy: [FilesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionFilesByMediaAssetRevisionIdAndTeaserImageUidManyToManyConnection!

  """Reads and enables pagination through a set of `License`."""
  licenses(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): LicensesConnection!

  """Reads and enables pagination through a set of `License`."""
  licensesByContentGroupingRevisionIdAndLicenseUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionLicensesByContentGroupingRevisionIdAndLicenseUidManyToManyConnection!

  """Reads and enables pagination through a set of `License`."""
  licensesByContentItemRevisionIdAndLicenseUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionLicensesByContentItemRevisionIdAndLicenseUidManyToManyConnection!

  """Reads and enables pagination through a set of `License`."""
  licensesByMediaAssetRevisionIdAndLicenseUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: LicenseCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: LicenseFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `License`."""
    orderBy: [LicensesOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionLicensesByMediaAssetRevisionIdAndLicenseUidManyToManyConnection!

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssetsByChapterRevisionIdAndMediaAssetUid(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionMediaAssetsByChapterRevisionIdAndMediaAssetUidManyToManyConnection!

  """Reads and enables pagination through a set of `Revision`."""
  nextRevisions(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RevisionCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: RevisionFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Revision`."""
    orderBy: [RevisionsOrderBy!] = [PRIMARY_KEY_ASC]
  ): RevisionsConnection!

  """Reads a single `Revision` that is related to this `Revision`."""
  previousRevision: Revision
  previousRevisionId: String
  rowId: String!
  type: String!
  uid: String!
}

"""
A connection to a list of `Actor` values, with data from `BroadcastService`.
"""
type RevisionActorsByBroadcastServiceRevisionIdAndPublisherUidManyToManyConnection {
  """
  A list of edges which contains the `Actor`, info from the `BroadcastService`, and the cursor to aid in pagination.
  """
  edges: [RevisionActorsByBroadcastServiceRevisionIdAndPublisherUidManyToManyEdge!]!

  """A list of `Actor` objects."""
  nodes: [Actor!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Actor` you could get from the connection."""
  totalCount: Int!
}

"""A `Actor` edge in the connection, with data from `BroadcastService`."""
type RevisionActorsByBroadcastServiceRevisionIdAndPublisherUidManyToManyEdge {
  """Reads and enables pagination through a set of `BroadcastService`."""
  broadcastServicesByPublisher(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastServiceCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastServiceFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastService`."""
    orderBy: [BroadcastServicesOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastServicesConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Actor` at the end of the edge."""
  node: Actor!
}

"""
A connection to a list of `BroadcastService` values, with data from `BroadcastEvent`.
"""
type RevisionBroadcastServicesByBroadcastEventRevisionIdAndBroadcastServiceUidManyToManyConnection {
  """
  A list of edges which contains the `BroadcastService`, info from the `BroadcastEvent`, and the cursor to aid in pagination.
  """
  edges: [RevisionBroadcastServicesByBroadcastEventRevisionIdAndBroadcastServiceUidManyToManyEdge!]!

  """A list of `BroadcastService` objects."""
  nodes: [BroadcastService!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `BroadcastService` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `BroadcastService` edge in the connection, with data from `BroadcastEvent`.
"""
type RevisionBroadcastServicesByBroadcastEventRevisionIdAndBroadcastServiceUidManyToManyEdge {
  """Reads and enables pagination through a set of `BroadcastEvent`."""
  broadcastEvents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastEventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastEvent`."""
    orderBy: [BroadcastEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastEventsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `BroadcastService` at the end of the edge."""
  node: BroadcastService!
}

"""
A condition to be used against `Revision` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input RevisionCondition {
  """Checks for equality with the object’s `alternativeIds` field."""
  alternativeIds: [String]

  """Checks for equality with the object’s `content` field."""
  content: JSON

  """Checks for equality with the object’s `created` field."""
  created: Datetime

  """Checks for equality with the object’s `datasource` field."""
  datasource: String

  """Checks for equality with the object’s `previousRevisionId` field."""
  previousRevisionId: String

  """Checks for equality with the object’s `rowId` field."""
  rowId: String

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A connection to a list of `ContentGrouping` values, with data from `ContentItem`.
"""
type RevisionContentGroupingsByContentItemRevisionIdAndPrimaryGroupingUidManyToManyConnection {
  """
  A list of edges which contains the `ContentGrouping`, info from the `ContentItem`, and the cursor to aid in pagination.
  """
  edges: [RevisionContentGroupingsByContentItemRevisionIdAndPrimaryGroupingUidManyToManyEdge!]!

  """A list of `ContentGrouping` objects."""
  nodes: [ContentGrouping!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ContentGrouping` you could get from the connection.
  """
  totalCount: Int!
}

"""
A `ContentGrouping` edge in the connection, with data from `ContentItem`.
"""
type RevisionContentGroupingsByContentItemRevisionIdAndPrimaryGroupingUidManyToManyEdge {
  """Reads and enables pagination through a set of `ContentItem`."""
  contentItemsByPrimaryGrouping(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentGrouping` at the end of the edge."""
  node: ContentGrouping!
}

"""
A connection to a list of `ContentItem` values, with data from `BroadcastEvent`.
"""
type RevisionContentItemsByBroadcastEventRevisionIdAndContentItemUidManyToManyConnection {
  """
  A list of edges which contains the `ContentItem`, info from the `BroadcastEvent`, and the cursor to aid in pagination.
  """
  edges: [RevisionContentItemsByBroadcastEventRevisionIdAndContentItemUidManyToManyEdge!]!

  """A list of `ContentItem` objects."""
  nodes: [ContentItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ContentItem` you could get from the connection."""
  totalCount: Int!
}

"""
A `ContentItem` edge in the connection, with data from `BroadcastEvent`.
"""
type RevisionContentItemsByBroadcastEventRevisionIdAndContentItemUidManyToManyEdge {
  """Reads and enables pagination through a set of `BroadcastEvent`."""
  broadcastEvents(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: BroadcastEventCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: BroadcastEventFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `BroadcastEvent`."""
    orderBy: [BroadcastEventsOrderBy!] = [PRIMARY_KEY_ASC]
  ): BroadcastEventsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ContentItem` at the end of the edge."""
  node: ContentItem!
}

"""A connection to a list of `File` values, with data from `Actor`."""
type RevisionFilesByActorRevisionIdAndProfilePictureUidManyToManyConnection {
  """
  A list of edges which contains the `File`, info from the `Actor`, and the cursor to aid in pagination.
  """
  edges: [RevisionFilesByActorRevisionIdAndProfilePictureUidManyToManyEdge!]!

  """A list of `File` objects."""
  nodes: [File!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection, with data from `Actor`."""
type RevisionFilesByActorRevisionIdAndProfilePictureUidManyToManyEdge {
  """Reads and enables pagination through a set of `Actor`."""
  actorsByProfilePicture(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActorCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ActorFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Actor`."""
    orderBy: [ActorsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ActorsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `File` at the end of the edge."""
  node: File!
}

"""A connection to a list of `File` values, with data from `MediaAsset`."""
type RevisionFilesByMediaAssetRevisionIdAndFileUidManyToManyConnection {
  """
  A list of edges which contains the `File`, info from the `MediaAsset`, and the cursor to aid in pagination.
  """
  edges: [RevisionFilesByMediaAssetRevisionIdAndFileUidManyToManyEdge!]!

  """A list of `File` objects."""
  nodes: [File!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection, with data from `MediaAsset`."""
type RevisionFilesByMediaAssetRevisionIdAndFileUidManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!

  """The `File` at the end of the edge."""
  node: File!
}

"""A connection to a list of `File` values, with data from `MediaAsset`."""
type RevisionFilesByMediaAssetRevisionIdAndTeaserImageUidManyToManyConnection {
  """
  A list of edges which contains the `File`, info from the `MediaAsset`, and the cursor to aid in pagination.
  """
  edges: [RevisionFilesByMediaAssetRevisionIdAndTeaserImageUidManyToManyEdge!]!

  """A list of `File` objects."""
  nodes: [File!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `File` you could get from the connection."""
  totalCount: Int!
}

"""A `File` edge in the connection, with data from `MediaAsset`."""
type RevisionFilesByMediaAssetRevisionIdAndTeaserImageUidManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssetsByTeaserImage(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!

  """The `File` at the end of the edge."""
  node: File!
}

"""
A filter to be used against `Revision` object types. All fields are combined with a logical ‘and.’
"""
input RevisionFilter {
  """Filter by the object’s `alternativeIds` field."""
  alternativeIds: StringListFilter

  """Checks for all expressions in this list."""
  and: [RevisionFilter!]

  """Filter by the object’s `content` field."""
  content: JSONFilter

  """Filter by the object’s `created` field."""
  created: DatetimeFilter

  """Filter by the object’s `datasource` field."""
  datasource: StringFilter

  """Negates the expression."""
  not: RevisionFilter

  """Checks for any expressions in this list."""
  or: [RevisionFilter!]

  """Filter by the object’s `previousRevisionId` field."""
  previousRevisionId: StringFilter

  """Filter by the object’s `rowId` field."""
  rowId: StringFilter

  """Filter by the object’s `type` field."""
  type: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""
A connection to a list of `License` values, with data from `ContentGrouping`.
"""
type RevisionLicensesByContentGroupingRevisionIdAndLicenseUidManyToManyConnection {
  """
  A list of edges which contains the `License`, info from the `ContentGrouping`, and the cursor to aid in pagination.
  """
  edges: [RevisionLicensesByContentGroupingRevisionIdAndLicenseUidManyToManyEdge!]!

  """A list of `License` objects."""
  nodes: [License!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `License` you could get from the connection."""
  totalCount: Int!
}

"""A `License` edge in the connection, with data from `ContentGrouping`."""
type RevisionLicensesByContentGroupingRevisionIdAndLicenseUidManyToManyEdge {
  """Reads and enables pagination through a set of `ContentGrouping`."""
  contentGroupings(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentGroupingCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentGroupingFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentGrouping`."""
    orderBy: [ContentGroupingsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentGroupingsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `License` at the end of the edge."""
  node: License!
}

"""
A connection to a list of `License` values, with data from `ContentItem`.
"""
type RevisionLicensesByContentItemRevisionIdAndLicenseUidManyToManyConnection {
  """
  A list of edges which contains the `License`, info from the `ContentItem`, and the cursor to aid in pagination.
  """
  edges: [RevisionLicensesByContentItemRevisionIdAndLicenseUidManyToManyEdge!]!

  """A list of `License` objects."""
  nodes: [License!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `License` you could get from the connection."""
  totalCount: Int!
}

"""A `License` edge in the connection, with data from `ContentItem`."""
type RevisionLicensesByContentItemRevisionIdAndLicenseUidManyToManyEdge {
  """Reads and enables pagination through a set of `ContentItem`."""
  contentItems(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ContentItemCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ContentItemFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `ContentItem`."""
    orderBy: [ContentItemsOrderBy!] = [PRIMARY_KEY_ASC]
  ): ContentItemsConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `License` at the end of the edge."""
  node: License!
}

"""
A connection to a list of `License` values, with data from `MediaAsset`.
"""
type RevisionLicensesByMediaAssetRevisionIdAndLicenseUidManyToManyConnection {
  """
  A list of edges which contains the `License`, info from the `MediaAsset`, and the cursor to aid in pagination.
  """
  edges: [RevisionLicensesByMediaAssetRevisionIdAndLicenseUidManyToManyEdge!]!

  """A list of `License` objects."""
  nodes: [License!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `License` you could get from the connection."""
  totalCount: Int!
}

"""A `License` edge in the connection, with data from `MediaAsset`."""
type RevisionLicensesByMediaAssetRevisionIdAndLicenseUidManyToManyEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """Reads and enables pagination through a set of `MediaAsset`."""
  mediaAssets(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaAssetCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: MediaAssetFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `MediaAsset`."""
    orderBy: [MediaAssetsOrderBy!] = [PRIMARY_KEY_ASC]
  ): MediaAssetsConnection!

  """The `License` at the end of the edge."""
  node: License!
}

"""
A connection to a list of `MediaAsset` values, with data from `Chapter`.
"""
type RevisionMediaAssetsByChapterRevisionIdAndMediaAssetUidManyToManyConnection {
  """
  A list of edges which contains the `MediaAsset`, info from the `Chapter`, and the cursor to aid in pagination.
  """
  edges: [RevisionMediaAssetsByChapterRevisionIdAndMediaAssetUidManyToManyEdge!]!

  """A list of `MediaAsset` objects."""
  nodes: [MediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MediaAsset` you could get from the connection."""
  totalCount: Int!
}

"""A `MediaAsset` edge in the connection, with data from `Chapter`."""
type RevisionMediaAssetsByChapterRevisionIdAndMediaAssetUidManyToManyEdge {
  """Reads and enables pagination through a set of `Chapter`."""
  chapters(
    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ChapterCondition

    """
    A filter to be used in determining which values should be returned by the collection.
    """
    filter: ChapterFilter

    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """The method to use when ordering `Chapter`."""
    orderBy: [ChaptersOrderBy!] = [PRIMARY_KEY_ASC]
  ): ChaptersConnection!

  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MediaAsset` at the end of the edge."""
  node: MediaAsset!
}

"""A connection to a list of `Revision` values."""
type RevisionsConnection {
  """
  A list of edges which contains the `Revision` and cursor to aid in pagination.
  """
  edges: [RevisionsEdge!]!

  """A list of `Revision` objects."""
  nodes: [Revision!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Revision` you could get from the connection."""
  totalCount: Int!
}

"""A `Revision` edge in the connection."""
type RevisionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Revision` at the end of the edge."""
  node: Revision!
}

"""Methods to use when ordering `Revision`."""
enum RevisionsOrderBy {
  ALTERNATIVE_IDS_ASC
  ALTERNATIVE_IDS_DESC
  CONTENT_ASC
  CONTENT_DESC
  CREATED_ASC
  CREATED_DESC
  DATASOURCE_ASC
  DATASOURCE_DESC
  ID_ASC
  ID_DESC
  NATURAL
  PREVIOUS_REVISION_ID_ASC
  PREVIOUS_REVISION_ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TYPE_ASC
  TYPE_DESC
  UID_ASC
  UID_DESC
}

"""
A filter to be used against String fields. All fields are combined with a logical ‘and.’
"""
input StringFilter {
  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: String

  """
  Not equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  distinctFromInsensitive: String

  """Ends with the specified string (case-sensitive)."""
  endsWith: String

  """Ends with the specified string (case-insensitive)."""
  endsWithInsensitive: String

  """Equal to the specified value."""
  equalTo: String

  """Equal to the specified value (case-insensitive)."""
  equalToInsensitive: String

  """Greater than the specified value."""
  greaterThan: String

  """Greater than the specified value (case-insensitive)."""
  greaterThanInsensitive: String

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: String

  """Greater than or equal to the specified value (case-insensitive)."""
  greaterThanOrEqualToInsensitive: String

  """Included in the specified list."""
  in: [String!]

  """Included in the specified list (case-insensitive)."""
  inInsensitive: [String!]

  """Contains the specified string (case-sensitive)."""
  includes: String

  """Contains the specified string (case-insensitive)."""
  includesInsensitive: String

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: String

  """Less than the specified value (case-insensitive)."""
  lessThanInsensitive: String

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: String

  """Less than or equal to the specified value (case-insensitive)."""
  lessThanOrEqualToInsensitive: String

  """
  Matches the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  like: String

  """
  Matches the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  likeInsensitive: String

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: String

  """
  Equal to the specified value, treating null like an ordinary value (case-insensitive).
  """
  notDistinctFromInsensitive: String

  """Does not end with the specified string (case-sensitive)."""
  notEndsWith: String

  """Does not end with the specified string (case-insensitive)."""
  notEndsWithInsensitive: String

  """Not equal to the specified value."""
  notEqualTo: String

  """Not equal to the specified value (case-insensitive)."""
  notEqualToInsensitive: String

  """Not included in the specified list."""
  notIn: [String!]

  """Not included in the specified list (case-insensitive)."""
  notInInsensitive: [String!]

  """Does not contain the specified string (case-sensitive)."""
  notIncludes: String

  """Does not contain the specified string (case-insensitive)."""
  notIncludesInsensitive: String

  """
  Does not match the specified pattern (case-sensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLike: String

  """
  Does not match the specified pattern (case-insensitive). An underscore (_) matches any single character; a percent sign (%) matches any sequence of zero or more characters.
  """
  notLikeInsensitive: String

  """Does not start with the specified string (case-sensitive)."""
  notStartsWith: String

  """Does not start with the specified string (case-insensitive)."""
  notStartsWithInsensitive: String

  """Starts with the specified string (case-sensitive)."""
  startsWith: String

  """Starts with the specified string (case-insensitive)."""
  startsWithInsensitive: String
}

"""
A filter to be used against String List fields. All fields are combined with a logical ‘and.’
"""
input StringListFilter {
  """Any array item is equal to the specified value."""
  anyEqualTo: String

  """Any array item is greater than the specified value."""
  anyGreaterThan: String

  """Any array item is greater than or equal to the specified value."""
  anyGreaterThanOrEqualTo: String

  """Any array item is less than the specified value."""
  anyLessThan: String

  """Any array item is less than or equal to the specified value."""
  anyLessThanOrEqualTo: String

  """Any array item is not equal to the specified value."""
  anyNotEqualTo: String

  """Contained by the specified list of values."""
  containedBy: [String]

  """Contains the specified list of values."""
  contains: [String]

  """
  Not equal to the specified value, treating null like an ordinary value.
  """
  distinctFrom: [String]

  """Equal to the specified value."""
  equalTo: [String]

  """Greater than the specified value."""
  greaterThan: [String]

  """Greater than or equal to the specified value."""
  greaterThanOrEqualTo: [String]

  """
  Is null (if `true` is specified) or is not null (if `false` is specified).
  """
  isNull: Boolean

  """Less than the specified value."""
  lessThan: [String]

  """Less than or equal to the specified value."""
  lessThanOrEqualTo: [String]

  """Equal to the specified value, treating null like an ordinary value."""
  notDistinctFrom: [String]

  """Not equal to the specified value."""
  notEqualTo: [String]

  """Overlaps the specified list of values."""
  overlaps: [String]
}

type Transcript {
  engine: String!
  language: String!

  """Reads a single `MediaAsset` that is related to this `Transcript`."""
  mediaAsset: MediaAsset
  mediaAssetUid: String!
  text: String!
  uid: String!
}

"""
A condition to be used against `Transcript` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TranscriptCondition {
  """Checks for equality with the object’s `engine` field."""
  engine: String

  """Checks for equality with the object’s `language` field."""
  language: String

  """Checks for equality with the object’s `mediaAssetUid` field."""
  mediaAssetUid: String

  """Checks for equality with the object’s `text` field."""
  text: String

  """Checks for equality with the object’s `uid` field."""
  uid: String
}

"""
A filter to be used against `Transcript` object types. All fields are combined with a logical ‘and.’
"""
input TranscriptFilter {
  """Checks for all expressions in this list."""
  and: [TranscriptFilter!]

  """Filter by the object’s `engine` field."""
  engine: StringFilter

  """Filter by the object’s `language` field."""
  language: StringFilter

  """Filter by the object’s `mediaAssetUid` field."""
  mediaAssetUid: StringFilter

  """Negates the expression."""
  not: TranscriptFilter

  """Checks for any expressions in this list."""
  or: [TranscriptFilter!]

  """Filter by the object’s `text` field."""
  text: StringFilter

  """Filter by the object’s `uid` field."""
  uid: StringFilter
}

"""A connection to a list of `Transcript` values."""
type TranscriptsConnection {
  """
  A list of edges which contains the `Transcript` and cursor to aid in pagination.
  """
  edges: [TranscriptsEdge!]!

  """A list of `Transcript` objects."""
  nodes: [Transcript!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Transcript` you could get from the connection."""
  totalCount: Int!
}

"""A `Transcript` edge in the connection."""
type TranscriptsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Transcript` at the end of the edge."""
  node: Transcript!
}

"""Methods to use when ordering `Transcript`."""
enum TranscriptsOrderBy {
  ENGINE_ASC
  ENGINE_DESC
  LANGUAGE_ASC
  LANGUAGE_DESC
  MEDIA_ASSET_UID_ASC
  MEDIA_ASSET_UID_DESC
  NATURAL
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
  TEXT_ASC
  TEXT_DESC
  UID_ASC
  UID_DESC
}

type _ActorToContribution {
  a: String!

  """Reads a single `Actor` that is related to this `_ActorToContribution`."""
  actorByA: Actor
  b: String!

  """
  Reads a single `Contribution` that is related to this `_ActorToContribution`.
  """
  contributionByB: Contribution
}

"""
A condition to be used against `_ActorToContribution` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input _ActorToContributionCondition {
  """Checks for equality with the object’s `a` field."""
  a: String

  """Checks for equality with the object’s `b` field."""
  b: String
}

"""
A filter to be used against `_ActorToContribution` object types. All fields are combined with a logical ‘and.’
"""
input _ActorToContributionFilter {
  """Filter by the object’s `a` field."""
  a: StringFilter

  """Checks for all expressions in this list."""
  and: [_ActorToContributionFilter!]

  """Filter by the object’s `b` field."""
  b: StringFilter

  """Negates the expression."""
  not: _ActorToContributionFilter

  """Checks for any expressions in this list."""
  or: [_ActorToContributionFilter!]
}

"""A connection to a list of `_ActorToContribution` values."""
type _ActorToContributionsConnection {
  """
  A list of edges which contains the `_ActorToContribution` and cursor to aid in pagination.
  """
  edges: [_ActorToContributionsEdge!]!

  """A list of `_ActorToContribution` objects."""
  nodes: [_ActorToContribution!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_ActorToContribution` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_ActorToContribution` edge in the connection."""
type _ActorToContributionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_ActorToContribution` at the end of the edge."""
  node: _ActorToContribution!
}

"""Methods to use when ordering `_ActorToContribution`."""
enum _ActorToContributionsOrderBy {
  A_ASC
  A_DESC
  B_ASC
  B_DESC
  NATURAL
}

type _ConceptToContentItem {
  a: String!
  b: String!

  """
  Reads a single `Concept` that is related to this `_ConceptToContentItem`.
  """
  conceptByA: Concept

  """
  Reads a single `ContentItem` that is related to this `_ConceptToContentItem`.
  """
  contentItemByB: ContentItem
}

"""
A condition to be used against `_ConceptToContentItem` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input _ConceptToContentItemCondition {
  """Checks for equality with the object’s `a` field."""
  a: String

  """Checks for equality with the object’s `b` field."""
  b: String
}

"""
A filter to be used against `_ConceptToContentItem` object types. All fields are combined with a logical ‘and.’
"""
input _ConceptToContentItemFilter {
  """Filter by the object’s `a` field."""
  a: StringFilter

  """Checks for all expressions in this list."""
  and: [_ConceptToContentItemFilter!]

  """Filter by the object’s `b` field."""
  b: StringFilter

  """Negates the expression."""
  not: _ConceptToContentItemFilter

  """Checks for any expressions in this list."""
  or: [_ConceptToContentItemFilter!]
}

"""A connection to a list of `_ConceptToContentItem` values."""
type _ConceptToContentItemsConnection {
  """
  A list of edges which contains the `_ConceptToContentItem` and cursor to aid in pagination.
  """
  edges: [_ConceptToContentItemsEdge!]!

  """A list of `_ConceptToContentItem` objects."""
  nodes: [_ConceptToContentItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_ConceptToContentItem` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_ConceptToContentItem` edge in the connection."""
type _ConceptToContentItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_ConceptToContentItem` at the end of the edge."""
  node: _ConceptToContentItem!
}

"""Methods to use when ordering `_ConceptToContentItem`."""
enum _ConceptToContentItemsOrderBy {
  A_ASC
  A_DESC
  B_ASC
  B_DESC
  NATURAL
}

type _ConceptToMediaAsset {
  a: String!
  b: String!

  """
  Reads a single `Concept` that is related to this `_ConceptToMediaAsset`.
  """
  conceptByA: Concept

  """
  Reads a single `MediaAsset` that is related to this `_ConceptToMediaAsset`.
  """
  mediaAssetByB: MediaAsset
}

"""
A condition to be used against `_ConceptToMediaAsset` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input _ConceptToMediaAssetCondition {
  """Checks for equality with the object’s `a` field."""
  a: String

  """Checks for equality with the object’s `b` field."""
  b: String
}

"""
A filter to be used against `_ConceptToMediaAsset` object types. All fields are combined with a logical ‘and.’
"""
input _ConceptToMediaAssetFilter {
  """Filter by the object’s `a` field."""
  a: StringFilter

  """Checks for all expressions in this list."""
  and: [_ConceptToMediaAssetFilter!]

  """Filter by the object’s `b` field."""
  b: StringFilter

  """Negates the expression."""
  not: _ConceptToMediaAssetFilter

  """Checks for any expressions in this list."""
  or: [_ConceptToMediaAssetFilter!]
}

"""A connection to a list of `_ConceptToMediaAsset` values."""
type _ConceptToMediaAssetsConnection {
  """
  A list of edges which contains the `_ConceptToMediaAsset` and cursor to aid in pagination.
  """
  edges: [_ConceptToMediaAssetsEdge!]!

  """A list of `_ConceptToMediaAsset` objects."""
  nodes: [_ConceptToMediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_ConceptToMediaAsset` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_ConceptToMediaAsset` edge in the connection."""
type _ConceptToMediaAssetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_ConceptToMediaAsset` at the end of the edge."""
  node: _ConceptToMediaAsset!
}

"""Methods to use when ordering `_ConceptToMediaAsset`."""
enum _ConceptToMediaAssetsOrderBy {
  A_ASC
  A_DESC
  B_ASC
  B_DESC
  NATURAL
}

type _ContentGroupingToContentItem {
  a: String!
  b: String!

  """
  Reads a single `ContentGrouping` that is related to this `_ContentGroupingToContentItem`.
  """
  contentGroupingByA: ContentGrouping

  """
  Reads a single `ContentItem` that is related to this `_ContentGroupingToContentItem`.
  """
  contentItemByB: ContentItem
}

"""
A condition to be used against `_ContentGroupingToContentItem` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input _ContentGroupingToContentItemCondition {
  """Checks for equality with the object’s `a` field."""
  a: String

  """Checks for equality with the object’s `b` field."""
  b: String
}

"""
A filter to be used against `_ContentGroupingToContentItem` object types. All fields are combined with a logical ‘and.’
"""
input _ContentGroupingToContentItemFilter {
  """Filter by the object’s `a` field."""
  a: StringFilter

  """Checks for all expressions in this list."""
  and: [_ContentGroupingToContentItemFilter!]

  """Filter by the object’s `b` field."""
  b: StringFilter

  """Negates the expression."""
  not: _ContentGroupingToContentItemFilter

  """Checks for any expressions in this list."""
  or: [_ContentGroupingToContentItemFilter!]
}

"""A connection to a list of `_ContentGroupingToContentItem` values."""
type _ContentGroupingToContentItemsConnection {
  """
  A list of edges which contains the `_ContentGroupingToContentItem` and cursor to aid in pagination.
  """
  edges: [_ContentGroupingToContentItemsEdge!]!

  """A list of `_ContentGroupingToContentItem` objects."""
  nodes: [_ContentGroupingToContentItem!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_ContentGroupingToContentItem` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_ContentGroupingToContentItem` edge in the connection."""
type _ContentGroupingToContentItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_ContentGroupingToContentItem` at the end of the edge."""
  node: _ContentGroupingToContentItem!
}

"""Methods to use when ordering `_ContentGroupingToContentItem`."""
enum _ContentGroupingToContentItemsOrderBy {
  A_ASC
  A_DESC
  B_ASC
  B_DESC
  NATURAL
}

type _ContentItemToContribution {
  a: String!
  b: String!

  """
  Reads a single `ContentItem` that is related to this `_ContentItemToContribution`.
  """
  contentItemByA: ContentItem

  """
  Reads a single `Contribution` that is related to this `_ContentItemToContribution`.
  """
  contributionByB: Contribution
}

"""
A condition to be used against `_ContentItemToContribution` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input _ContentItemToContributionCondition {
  """Checks for equality with the object’s `a` field."""
  a: String

  """Checks for equality with the object’s `b` field."""
  b: String
}

"""
A filter to be used against `_ContentItemToContribution` object types. All fields are combined with a logical ‘and.’
"""
input _ContentItemToContributionFilter {
  """Filter by the object’s `a` field."""
  a: StringFilter

  """Checks for all expressions in this list."""
  and: [_ContentItemToContributionFilter!]

  """Filter by the object’s `b` field."""
  b: StringFilter

  """Negates the expression."""
  not: _ContentItemToContributionFilter

  """Checks for any expressions in this list."""
  or: [_ContentItemToContributionFilter!]
}

"""A connection to a list of `_ContentItemToContribution` values."""
type _ContentItemToContributionsConnection {
  """
  A list of edges which contains the `_ContentItemToContribution` and cursor to aid in pagination.
  """
  edges: [_ContentItemToContributionsEdge!]!

  """A list of `_ContentItemToContribution` objects."""
  nodes: [_ContentItemToContribution!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_ContentItemToContribution` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_ContentItemToContribution` edge in the connection."""
type _ContentItemToContributionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_ContentItemToContribution` at the end of the edge."""
  node: _ContentItemToContribution!
}

"""Methods to use when ordering `_ContentItemToContribution`."""
enum _ContentItemToContributionsOrderBy {
  A_ASC
  A_DESC
  B_ASC
  B_DESC
  NATURAL
}

type _ContentItemToMediaAsset {
  a: String!
  b: String!

  """
  Reads a single `ContentItem` that is related to this `_ContentItemToMediaAsset`.
  """
  contentItemByA: ContentItem

  """
  Reads a single `MediaAsset` that is related to this `_ContentItemToMediaAsset`.
  """
  mediaAssetByB: MediaAsset
}

"""
A condition to be used against `_ContentItemToMediaAsset` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input _ContentItemToMediaAssetCondition {
  """Checks for equality with the object’s `a` field."""
  a: String

  """Checks for equality with the object’s `b` field."""
  b: String
}

"""
A filter to be used against `_ContentItemToMediaAsset` object types. All fields are combined with a logical ‘and.’
"""
input _ContentItemToMediaAssetFilter {
  """Filter by the object’s `a` field."""
  a: StringFilter

  """Checks for all expressions in this list."""
  and: [_ContentItemToMediaAssetFilter!]

  """Filter by the object’s `b` field."""
  b: StringFilter

  """Negates the expression."""
  not: _ContentItemToMediaAssetFilter

  """Checks for any expressions in this list."""
  or: [_ContentItemToMediaAssetFilter!]
}

"""A connection to a list of `_ContentItemToMediaAsset` values."""
type _ContentItemToMediaAssetsConnection {
  """
  A list of edges which contains the `_ContentItemToMediaAsset` and cursor to aid in pagination.
  """
  edges: [_ContentItemToMediaAssetsEdge!]!

  """A list of `_ContentItemToMediaAsset` objects."""
  nodes: [_ContentItemToMediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_ContentItemToMediaAsset` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_ContentItemToMediaAsset` edge in the connection."""
type _ContentItemToMediaAssetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_ContentItemToMediaAsset` at the end of the edge."""
  node: _ContentItemToMediaAsset!
}

"""Methods to use when ordering `_ContentItemToMediaAsset`."""
enum _ContentItemToMediaAssetsOrderBy {
  A_ASC
  A_DESC
  B_ASC
  B_DESC
  NATURAL
}

type _ContributionToMediaAsset {
  a: String!
  b: String!

  """
  Reads a single `Contribution` that is related to this `_ContributionToMediaAsset`.
  """
  contributionByA: Contribution

  """
  Reads a single `MediaAsset` that is related to this `_ContributionToMediaAsset`.
  """
  mediaAssetByB: MediaAsset
}

"""
A condition to be used against `_ContributionToMediaAsset` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input _ContributionToMediaAssetCondition {
  """Checks for equality with the object’s `a` field."""
  a: String

  """Checks for equality with the object’s `b` field."""
  b: String
}

"""
A filter to be used against `_ContributionToMediaAsset` object types. All fields are combined with a logical ‘and.’
"""
input _ContributionToMediaAssetFilter {
  """Filter by the object’s `a` field."""
  a: StringFilter

  """Checks for all expressions in this list."""
  and: [_ContributionToMediaAssetFilter!]

  """Filter by the object’s `b` field."""
  b: StringFilter

  """Negates the expression."""
  not: _ContributionToMediaAssetFilter

  """Checks for any expressions in this list."""
  or: [_ContributionToMediaAssetFilter!]
}

"""A connection to a list of `_ContributionToMediaAsset` values."""
type _ContributionToMediaAssetsConnection {
  """
  A list of edges which contains the `_ContributionToMediaAsset` and cursor to aid in pagination.
  """
  edges: [_ContributionToMediaAssetsEdge!]!

  """A list of `_ContributionToMediaAsset` objects."""
  nodes: [_ContributionToMediaAsset!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `_ContributionToMediaAsset` you could get from the connection.
  """
  totalCount: Int!
}

"""A `_ContributionToMediaAsset` edge in the connection."""
type _ContributionToMediaAssetsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `_ContributionToMediaAsset` at the end of the edge."""
  node: _ContributionToMediaAsset!
}

"""Methods to use when ordering `_ContributionToMediaAsset`."""
enum _ContributionToMediaAssetsOrderBy {
  A_ASC
  A_DESC
  B_ASC
  B_DESC
  NATURAL
}
