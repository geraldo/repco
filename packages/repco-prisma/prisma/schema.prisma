datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
  output   = "../generated/dbml"
}

generator repco {
  provider = "repco-prisma-generate"
  output   = "../generated/repco"
}

enum ContentGroupingVariant {
  EPISODIC
  SERIAL
}

enum AgentType {
  DATASOURCE
  USER
}

// Core data model

model Repo {
  uid       String     @id @unique
  name      String?
  revisions Revision[]
}

model Agent {
  uid        String      @id @unique
  type       AgentType
  DataSource DataSource?
  User       User?
  Revisions  Revision[]
}

model User {
  uid   String @id @unique
  name  String
  agent Agent  @relation(fields: [uid], references: [uid])
}

model DataSource {
  uid       String  @id @unique
  // TODO: Make required once we reset the schema.
  pluginUid String?
  config    Json?
  cursor    String

  agent Agent @relation(fields: [uid], references: [uid])
}

model Block {
  cid        String    @id @unique
  // len        Int
  bytes      Bytes
  // links      String[]
  IsRevision Revision? @relation("RevisionBlock")
  IsContent  Revision? @relation("ContentBlock")
}

model Entity {
  uid        String @id @unique
  revisionId String @unique
  type       String

  // uris String[]
  // deleted boolean

  Revision Revision   @relation(fields: [revisionId], references: [id])
  Metadata Metadata[]
}

// model Uri {
//   uri String @unique
//   IsRevision Revision @relation("RevisionUri", fields: [uri]
//   scopes String[]
// }

model Revision {
  id String @id @unique

  // core relation scalars
  prevRevisionId String? @unique
  entityUid      String
  repoUid        String
  agentUid       String // uid of writing agent (datasource or user)

  // core headers
  entityType   String
  dateModified DateTime
  dateCreated  DateTime
  isDeleted    Boolean  @default(false) // todo: better have publication status
  entityUris   String[]
  revisionUris String[]

  // core derived fields
  revisionCid String @unique // cid of revision block
  contentCid  String @unique // cid of content block

  // core relations
  Repo          Repo      @relation(fields: [repoUid], references: [uid])
  Agent         Agent     @relation(fields: [agentUid], references: [uid])
  ContentBlock  Block     @relation("ContentBlock", fields: [contentCid], references: [cid])
  RevisionBlock Block     @relation("RevisionBlock", fields: [revisionCid], references: [cid])
  PrevRevision  Revision? @relation("RevisionHistory", fields: [prevRevisionId], references: [id])
  NextRevision  Revision? @relation("RevisionHistory")
  Entity        Entity?

  // entity relations
  ContentGrouping  ContentGrouping?
  ContentItem      ContentItem?
  License          License?
  MediaAsset       MediaAsset?
  File             File?
  Concept          Concept?
  Actor            Actor?
  BroadcastEvent   BroadcastEvent?
  BroadcastService BroadcastService?
  Chapter          Chapter?
  Contribution     Contribution?
  Metadata         Metadata?
}

// Domain data model

/// @repco(Entity)
model ContentGrouping {
  uid String @id @unique

  revisionId String   @unique
  revision   Revision @relation(fields: [revisionId], references: [id])

  groupingType String // TODO: enum?

  title       String
  subtitle    String?
  summary     String?
  description String?

  variant           ContentGroupingVariant
  broadcastSchedule String? // TODO: JSON (channel, rrule)

  startingDate    DateTime?
  terminationDate DateTime?

  license                License?      @relation(fields: [licenseUid], references: [uid])
  licenseUid             String?
  contentItemsPrimary    ContentItem[] @relation("primaryGrouping")
  contentItemsAdditional ContentItem[]
}

/// @repco(Entity)
model ContentItem {
  uid                 String            @id @unique /// @zod.refine(imports.isValidUID)
  revisionId          String            @unique
  revision            Revision          @relation(fields: [revisionId], references: [id])
  title               String
  subtitle            String?
  pubDate             DateTime? // TODO: Review this
  summary             String?
  content             String
  contentFormat       String
  primaryGrouping     ContentGrouping?  @relation("primaryGrouping", fields: [primaryGroupingUid], references: [uid])
  primaryGroupingUid  String?
  additionalGroupings ContentGrouping[]
  license             License?          @relation(fields: [licenseUid], references: [uid])
  licenseUid          String?
  mediaAssets         MediaAsset[]
  contributions       Contribution[]
  concepts            Concept[]
  broadcastEvents     BroadcastEvent[]
}

/// @repco(Entity)
model License {
  uid              String            @id @unique
  revisionId       String            @unique
  revision         Revision          @relation(fields: [revisionId], references: [id])
  name             String
  contentItems     ContentItem[]
  mediaAssets      MediaAsset[]
  contentGroupings ContentGrouping[]
}

/// @repco(Entity)
model MediaAsset {
  uid         String   @id @unique
  revisionId  String   @unique
  revision    Revision @relation(fields: [revisionId], references: [id])
  title       String
  description String?

  file    File   @relation("file", fields: [fileUid], references: [uid])
  fileUid String

  duration  Float?
  mediaType String // TODO: Enum?

  contentItems   ContentItem[]
  transcripts    Transcript[]
  chapters       Chapter[]
  teaserImage    File?         @relation("thumbnail", fields: [teaserImageUid], references: [uid])
  teaserImageUid String?

  license    License? @relation(fields: [licenseUid], references: [uid])
  licenseUid String?

  contributions Contribution[]
  concepts      Concept[]
}

/// @repco(Entity)
model Contribution {
  uid          String        @id @unique
  revisionId   String        @unique
  revision     Revision      @relation(fields: [revisionId], references: [id])
  role         String
  actors       Actor[]
  mediaAssets  MediaAsset[]
  contentItems ContentItem[]
}

/// @repco(Entity)
model Actor {
  uid                  String             @id @unique
  revisionId           String             @unique
  revision             Revision           @relation(fields: [revisionId], references: [id])
  name                 String
  personOrOrganization String
  contactInformation   String
  profilePicture       File?              @relation(fields: [profilePictureUid], references: [uid])
  profilePictureUid    String
  contributions        Contribution[]
  broadcastService     BroadcastService[]
}

/// @repco(Entity)
model Chapter {
  uid           String     @id @unique
  revisionId    String     @unique
  revision      Revision   @relation(fields: [revisionId], references: [id])
  start         Float
  duration      Float
  title         String
  type          String // TODO: enum?
  mediaAsset    MediaAsset @relation(fields: [mediaAssetUid], references: [uid])
  mediaAssetUid String
}

/// @repco(Entity)
model BroadcastEvent {
  uid                 String           @id @unique
  revisionId          String           @unique
  revision            Revision         @relation(fields: [revisionId], references: [id])
  start               Float
  duration            Float
  contentItem         ContentItem      @relation(fields: [contentItemUid], references: [uid])
  contentItemUid      String
  broadcastService    BroadcastService @relation(fields: [broadcastServiceUid], references: [uid])
  broadcastServiceUid String
}

/// @repco(Entity)
model BroadcastService {
  uid             String           @id @unique
  revisionId      String           @unique
  revision        Revision         @relation(fields: [revisionId], references: [id])
  name            String
  publisher       Actor            @relation(fields: [publisherUid], references: [uid])
  publisherUid    String
  broadcastEvents BroadcastEvent[]
  medium          String // FM, Web, ...
  address         String
}

/// @repco(Entity)
model Transcript {
  uid           String     @id @unique
  language      String
  text          String
  engine        String
  mediaAsset    MediaAsset @relation(fields: [mediaAssetUid], references: [uid])
  mediaAssetUid String
}

/// @repco(Entity)
model File {
  uid                String       @id @unique
  revisionId         String       @unique
  revision           Revision     @relation(fields: [revisionId], references: [id])
  contentUrl         String
  mimeType           String?
  // contentSize        Int?  // size in bytes
  multihash          String? // hash encoded as multihash (IPFS spec)
  duration           Float?
  codec              String?
  bitrate            Int?
  resolution         String?
  additionalMetadata String?
  asMediaAssets      MediaAsset[] @relation("file")
  asThumbnail        MediaAsset[] @relation("thumbnail")
  actors             Actor[]
}

/// @repco(Entity)
model Concept {
  uid        String   @id @unique
  revisionId String   @unique
  revision   Revision @relation(fields: [revisionId], references: [id])

  originNamespace String?
  name            String
  summary         String?
  description     String?
  wikidataID      String?
  sameAsUid       String? @unique

  sameAs        Concept? @relation("isSameAs", fields: [sameAsUid], references: [uid])
  sameAsReverse Concept? @relation("isSameAs")

  contentItems ContentItem[]
  mediaAssets  MediaAsset[]
}

model Metadata {
  uid        String   @unique
  revisionId String   @unique
  revision   Revision @relation(fields: [revisionId], references: [id])

  targetUid String
  namespace String
  content   Json

  targetEntity Entity @relation(fields: [targetUid], references: [uid])
}
